//// •••••• FUNDAMENTAL IMPORTS •••••• ////
@import 'Tools/toolbox.scss';
$red: red;
// 1. Base Scenario = width: (20px) = manual values associated with that specific property that apply always, and do not change via breakpoint
// 2. Autocode Scenario
//    a. extend Auto = width: (auto, 20px) = you enter a value and it runs through a mixin that ouputs values for all the breakpoints based on global values
//    b. Custom Auto = width: (custo, 20px) = you enter a value and it runs through a mixin that outputs values for all the breakpoints based on your own custom values
// 3. Technical Scenario
//    a. Manual Tech = width: (tablet: (30px), phablet: (40px), phone: (60px)) = you enter manual values for every breakpoint you want to effect
//    b. Comprehensive Tech = width: (base:(20px), tablet: (30px), etc.) = you enter in a base value which is overridden by the breakpoints that follow.
//    c. Infinite Tech = width: (base: (20px), tablet: (auto, 44px), phablet: (custo, 55px), etc.) = you enter auto, custo or manual values in any breakpoint
// 4. Sub-Classes/States/Animations/Transitions
//    a. Class variations = header1: (..., vars: (blue: (width: 20px)) > .header1-blue class = you create class variation using an underscore before it's name.
//    b. Sub-Classes = header2: (..., _red: (width: 20px)) > .header2, .red class = you create
//    c. States = header3: (..., hover, active, etc.) = create pseudo elemental states.
// 5. Extensions = extend: (layout, grid, homepage) = you call an existing map class so that it's values get attributed to this specific class.

// Three CSS Groups:
//    a. Regular (which can be overridden by breakpoints or classes that come after it)
//    b. Breakpoint Based (All breakpoints and their classes go here)
//    c. Important (which come after all other CSS and stays at the bottom of the stylesheet)

// Custom Actions:
//    a. Have Wyndsor create an id, rather than a class
//    b. Add an !important to the end of a property
//    c. Add class or id to a group based on an existing style


//// --- SECTION --- ////////////////////////////
  //// 1 //////////// Code/Sass Snippet Name
    //// a //////////// Snippet Sub
//// --- END SECTION --- ////////////////////////

@mixin switchboard($EpicList, $EpicMap, $EpicAct, $EpicList2, $EpicMap2, $breakpoint, $extendswitch) {

  //// ✩ //////////// Root Variables
  $alphalist: $EpicList;
  $alphamap: $EpicMap;
  $betalist: $EpicList2;
  $betamap: $EpicMap2;
  $breakpointslist: to-list($breakpoints, 'keys'); // List of current breakpoints

    //// --- CLASS and SUB-CLASS GENERATOR --- ////////////////////////////
    @each $key, $value in $alphalist {

      //// 1 //////////// Determines legit or placeholder class, or id.
      $selectortype: null;

        @if $extendswitch != extender {
          $selectortype: if(if(str-index($value, '#'), true, false), "#", ".");
        }
        @else if $extendswitch == extender {
          $selectortype: if(if(str-index($value, '#'), true, false), "%", "%");
        }

      @if $EpicAct == normal or important {
        //// 2 //////////// Creates the classes, ids, subclasses and pseudos
        #{unquote($selectortype)}#{str-replace($value, '#', '')}#{if($extendswitch == extender and $EpicAct == breakpoint, unquote('-' + $breakpoint), '')} {

          //// --- CLASS GENERATOR --- ////////////////////////////
          @each $childproperty, $propertyvalue in _($alphamap, $key) {

            //// ✩ //////////// Variable Redirects
            $cssproperty: $childproperty;
            $cssvalue: $propertyvalue;

            //// ✩ //////////// Important Variables
            $subclassexist: chk-existence($cssproperty, _);
            $extendexist: chk-existence($cssproperty, extend);
            $cssvalueslist: to-list($cssvalue, "values");
            $propvalstring: map-tostring($cssvalue, ' ');
            $breakpointdefinition: map-tostring(to-list($cssvalue, "keys"), '');
            $breakpointpresent: if(map-check($media-sizes, $breakpointdefinition) or map-check($media-expressions, $breakpointdefinition), true, false);
            $importantpresent: chk-existence($propvalstring, important);

            //// > //////////// Will not allow Pseudos, Sub-Casses, or Extensions
            @if map-check($pseudos, $cssproperty) == false and $subclassexist == false and $extendexist == false {

              //// 1 //////////// If an important property
              @if $EpicAct == important and $breakpointpresent == false and $importantpresent == true {
                #{$cssproperty}: #{if(chk-existence($propvalstring, !important), str-replace($propvalstring, ' !important', ' !important'), if(chk-existence($propvalstring, important), str-replace($propvalstring, ' important', ''), ''))};
              }

              //// 3 //////////// If a normal property
              @else if $EpicAct == normal {
                @if $importantpresent == true {
                  // Fires Blank Property
                }
                @else if $breakpointpresent == true {
                  // Fires Blank Property
                }
                @else {
                  #{$cssproperty}: #{$cssvalue};
                }
              }
              @else {
                // Fires Blank Property
              }
            }
            //// > //////////// End of IF
          }

          //// --- SUB-CLASS and PSEUDO GENERATOR --- ////////////////////////////
          @each $childproperty, $propertyvalue in _($alphamap, $key) {

            //// ✩ //////////// Important Variables
            $subclassexist: chk-existence($childproperty, _);
            $extendexist: chk-existence($childproperty, extend);

            //// > //////////// Will not allow Pseudos, Sub-Casses, or Extensions
            @if $extendexist == false and map-check($pseudos, $childproperty) == true or $subclassexist == true {

              //// ✩ //////////// Determines if Sub-Class or Pseudo
              $connector: null;

                //// 1 //////////// Allows or Disallows the Pseudo Generator to Run
                @if map-check($pseudos, $childproperty) {
                  $connector: ":";
                }
                //// 2 //////////// Allows or Disallows the Sub-Class Generator to Run
                @else if $subclassexist == true {
                  $connector: "-";
                }

              //// a //////////// Creates Sub-Class or Pseudo
              &#{unquote($connector)}#{str-replace($childproperty, '_', '')} {

                @each $subproperty, $subpropertyvalue in $propertyvalue {


                }
              }

            }
          }
        }
      }
      @if $EpicAct == breakpoint {

          //// ✩ //////////// Important Variables
          $fauxmap: list-checkmake($breakpointslist, _($alphamap, $key));

          //$fauxmap2: map-removeKeys(_($alphamap, $key), to-list($extensions, 'keys'));
          //$mapbreakpoints: list-checkmake($breakpointslist, $fauxmap2);
          //$mapbrkpointclean: remove-duplicates($mapbreakpoints);

          $breakpointtest: "<tablet";
          //$extendexist: chk-existence($cssproperty, extend); //$extendswitch == extender and

          @for $i from 1 through length($breakpointslist) {

            $testing: to-list(_($breakpoints, nth($breakpointslist, $i)));
            $testinglength: length($testing);

            $brk1: null;
            $brk2: null;
            $brk3: null;
            $brk4: null;
            $brk5: null;

            @if $testinglength >= 1 {
              $brk1: if(nth($testing, 1) != null, nth($testing, 1), null);
              @if $testinglength > 1 {
                $brk2: if(nth($testing, 2) != null, nth($testing, 2), null);
                @if $testinglength > 2 {
                  $brk2: if(nth($testing, 3) != null, nth($testing, 3), null);
                  @if $testinglength > 3 {
                    $brk2: if(nth($testing, 4) != null, nth($testing, 4), null);
                    @if $testinglength > 4 {
                      $brk2: if(nth($testing, 5) != null, nth($testing, 5), null);
                    }
                  }
                }
              }
            }

            @include brkpoint($testing) {
              #{unquote($selectortype)}#{str-replace($value, '#', '')}#{if($extendswitch == extender, unquote('-' + $i), '')} {

                //// --- CLASS GENERATOR --- ////////////////////////////
                @each $childproperty, $propertyvalue in _($alphamap, $key) {

                  //// ✩ //////////// Variable Redirects
                  $cssproperty: $childproperty;
                  $cssvalue: $propertyvalue;

                  //// ✩ //////////// Important Variables
                  $subclassexist: chk-existence($cssproperty, _);
                  $extendexist: chk-existence($cssproperty, extend);
                  $cssvalueslist: to-list($cssvalue, "values");
                  $propvalstring: map-tostring($cssvalue, ' ');
                  $breakpointdefinition: map-tostring(to-list($cssvalue, "keys"), '');
                  $breakpointpresent: if(map-check($media-sizes, $breakpointdefinition) or map-check($media-expressions, $breakpointdefinition), true, false);
                  $importantpresent: chk-existence($propvalstring, important);

                  //// > //////////// Will not allow Pseudos, Sub-Casses, or Extensions
                  @if map-check($pseudos, $cssproperty) == false and $subclassexist == false and $extendexist == false {

                    //// 2 //////////// If a property with breakpoints
                    @if $EpicAct == breakpoint and $breakpointpresent == true {
                      #{$cssproperty}:#{$cssvalueslist};
                    }

                    //// 3 //////////// If a normal property
                    @else {
                      @if $importantpresent == true {
                        // Fires Blank Property
                      }
                      @else if $breakpointpresent == true {
                        // Fires Blank Property
                      }
                      @else {
                        // Fires Blank Property
                      }
                    }

                  }
                  //// > //////////// End of IF
                }
              }
            }
          }
        }
      }
    }




  //// --- END CLASS GENERATOR --- ////////////////////////


$TestCombo-List: (
  1: Phase2-Class,
  2: #Phase2-Class2
);

$TestCombo-Deets: (
  1: (
    grid: (grid),
    width: 555px,
    height: (50px, important),
    extend: (
      tablet: (Style1, Style2)
    ),
    color: (
      tablet: $red !important),
    background: (
      tablet: grey,
      desktop: black
    ),
    _blue: (
      width: (20px))
  ),
  2: (
    grid: (sub-grid !important),
    height:
    (10000px
      20px
      40px),
    extend: (
      base: (Style1, Style2, Style3)
      ),
    color: (
      tablet: blue !important),
    background: (
      tablet: black 20px 5px solid),
    _red: (
      width: (4000000px))
  ));

  $TestStyle-List: (
    1: Style1,
    2: Style2
  );

  $TestStyle-Map: (
    1: (
      width: 999999px,
      grid-template-rows: 25% 100px auto,
      font-style: solid,
      grid-column: "<start-line> / <end-line> | <start-line> / span <value>",
      grid-row: "third-line / 4",
      color: (
        tablet: (green)
      ),
    ),
    2: (
      height: 4444px,
      background: red,
      width: (
        tablet: 20px
      )
    )
  );

  //@include switchboard($EpicList: $TestCombo-List, $EpicMap: $TestCombo-Deets, $EpicAct: normal, $EpicList2: null, $EpicMap2: null, $breakpoint: null, $extendswitch: null);
  //@include switchboard($EpicList: $TestStyle-List, $EpicMap: $TestStyle-Map, $EpicAct: normal, $EpicList2: $TestCombo-List, $EpicMap2: $TestCombo-Deets, $breakpoint: null, $extendswitch: extender);
  @include switchboard($EpicList: $TestCombo-List, $EpicMap: $TestCombo-Deets, $EpicAct: breakpoint, $EpicList2: null, $EpicMap2: null, $breakpoint: 'tablet', $extendswitch: null);
//  @include switchboard($EpicList: $TestStyle-List, $EpicMap: $TestStyle-Map, $EpicAct: breakpoint, $EpicList2: $TestCombo-List, $EpicMap2: $TestCombo-Deets, $breakpoint: 'tablet', $extendswitch: extender);
//  @include switchboard($EpicList: $TestCombo-List, $EpicMap: $TestCombo-Deets, $EpicAct: important, $EpicList2: null, $EpicMap2: null, $breakpoint: null, $extendswitch: null);





//// THIS IS KIN, DONT FORGET ABOUT IT
@for $i from 1 through length($propertyvalue) {
  $propval: map-tostring(nth($propertyvalue, $i), ' ');
  $alttest1: null;
  $alttest2: null;

  @if if(str-index($propval, '+'), true, true) {
    $alttest1: if(str-index($propval, '+'), str-replace($propval, '+', '%'), $propval);
    @if if(str-index($alttest1, '_'), true, true) {
      $alttest2: if(str-index($alttest1, '_'), str-replace($alttest1, '_', '.'), $alttest1);
        @if if(str-index($alttest2, '#'), true, true) {
          $altnames: append($altnames, $alttest2, comma);
        }
      }
    @else {
      $altnames: append($altnames, $alttest1, comma);
    }
  }
  @else {
    $altnames: append($altnames, $propval, comma);
  }
}
$altname: if($altnames != (), $altnames, unquote(''));
#{if($altname != null, unquote(' ') + $altname, '')}


@each $property, $propertyvalue in $value {

  //font-variant: router($lock: $propertyvalue, $key: base, $level: One-Level);
  //  font-variant: router($lock: $propertyvalue, $key: important, $level: One-Level, $type: "values");
  //// ✩ //////////// Critical Variables
  $hands: map-tostring(to-list($property, "keys"), ' ');
  $lefty: if(map-check($extensions, $hands) or map-check($pseudos, $hands) or str-index($hands, '_'), true, false);
  $righty: if(map-check($pseudos, $hands) or str-index($hands, '_'), true, false);

  $leftfoot: router($lock: $propertyvalue, $key: $breakpoint, $level: One-Level);

  //// ✩ //////////// Important Variables
  $depthkey: map-depth(_($value, $property));
  //$brks: map-tostring(nth(to-list($propertyvalue, "keys"), 1), ', ');
  //$brkpresent: if(map-check($breakpoints, $brks) or map-check($media-expressions, $brks) or map-check($media-sizes, $brks), true, false);


    @if $EpicAct == important {

      // Every normal (but important) property
      @if $lefty != true {

        @if $leftfoot == true {
          @warn "Yeah, sorry. Breakpoints kinda already override regular css.";
        }
        @else if $leftfoot != true {
          font-family: $property;
          font-family: $propertyvalue;
          font-weight: 300px;
        }
      }
      // Pseudos and Subclasses
      @else if $righty == true {

      }
    }

    @else if $EpicAct == breakpoint  {
      @if $breakpoint-override == true {

      }
      @if $lefty != true {

      }
      @else if $righty == true {

      }
    }

    @else if $EpicAct == normal {
      //font-family: $depthkey;
    }

  //// > //////////// End of IF
}



@each $subprop, $subpropval in $propertyvalue {
  $hands: map-tostring(to-list($subprop, "keys"), ' ');
  $lefty: if(map-check($extensions, $hands), true, false);
  @if $lefty == false {
    @each $subsubprop, $subsubpropval in $subpropval {
      $mold: map-tostring($subsubprop);
      $mold-verify: if($mold != null, $mold, "nope");
      $basecheck: if(str-index($mold-verify, base), true, false);
      $importantcheck: if(str-index($mold-verify, ' important'), true, false);
      $breakpointcheck: if($breakpoint != null, if(str-index($mold-verify, $breakpoint), true, false), "()");
      $rslt-base: if(remove-duplicates(purge($basecheck)) == (), false, true);
      $rslt-imprtnt: if(remove-duplicates(purge($importantcheck)) == (), false, true);
      $rslt-brkpnt: if(remove-duplicates(purge($breakpointcheck)) == (), false, true);
      font-family: $rslt-imprtnt;
      font-family: $subsubprop;
      #{to-list($subprop, "keys")}: #{to-list($subsubpropval, "values")};
      @if $rslt-base == $rslt-base-solve and $rslt-imprtnt == $rslt-imprtnt-solve and $rslt-brkpnt == $rslt-brkpnt-solve {
        #{to-list($subprop, "keys")}: #{to-list($subsubpropval, "values")};
      }
    }
  }
}
