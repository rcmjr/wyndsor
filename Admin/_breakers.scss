@mixin naming($property, $filter) {

  @if $filter == child-name {
    $alias-1: null;
    $alias-2: null;

    $alias-prehand: str-replace(to-string($property), ' ', '');
    $alias-prime: " ." + str-replace($alias-prehand, $sass-child, '');
    $alias-prime-c: if(str-index(to-string($alias-prime), "_") == 3, true, false);

    @if $alias-prime-c == true {
      $alias-1: str-slice($alias-prime, 4, str-length($alias-prime));
      $alias-2: str-insert($alias-1, ".", 1);
    }

    &#{if($alias-prime-c == true, #{$alias-2}, #{$alias-prime})} {@content;}
  }

  @else if $filter == pseudo-name {
    &#{unquote(_($pseudos, $property))} {@content;}
  }

  @else if $filter == namespace-name {
    &#{if($property != null, unquote("\\:"), '') + if(str-index($property, $sass-namespace), str-replace($property, $sass-namespace, ''), '')} {@content;}
  }

  @else if $filter == subclass-name {
    &#{if($property != null, unquote("-"), '') + if(str-index($property, '_'), str-replace($property, _, ''), '')} {@content;}
  }
}

@mixin brker($property, $var-name, $filter, $state: normal) {
  $property: to-string($property);
  $brker-pseudos: if(map-check($pseudos, $property), true, false);
  $brker-namespace: if(str-index($property, $sass-namespace), true, false);
  $brker-child: if(str-index($property, $sass-child), true, false);
  $brker-subclass: if(str-index(str-slice($property, 0, 1), $sass-subclass), true, false);
  $brker-regular: if(chk-list($watchlist, $property), true, false);
  @if if(str-index($property, '\\*'), true, false) {
    @error "Heads up! You're using an '*' as a subclass under #{$var-name}, which isn't going to work.";
  }
  @if $brker-regular != true and $brker-pseudos == false and
      $brker-namespace == false and $brker-child == false and
      $brker-subclass == false and $filter == regular {@content;}
  @else if $brker-pseudos == true and $filter == pseudo {
    @if $state == normal {@include naming($property, pseudo-name) {@content;}}
    @else if $state == inner {@content;}}
  @else if $brker-namespace == true and $filter == namespace {
    @if $state == normal {@include naming($property, namespace-name) {@content;}}
    @else if $state == inner {@content;}}
  @else if $brker-child == true and $filter == child {
    @if $state == normal {@include naming($property, child-name) {@content;}}
    @else if $state == inner {@content;}}
  @else if $brker-subclass == true and $filter == subclass {
    @if $state == normal {@include naming($property, subclass-name) {@content;}}
    @else if $state == inner {@content;}}
}

@mixin filterpoint($filter, $EpicAct, $redpill, $bluepill, $purplepill, $override-brkname, $allbreakpoint-override, $breakpoint) {
  @if $EpicAct == normal and $filter == regular {
    $important-removal: normal;
    @if $redpill == false and $bluepill == false and $purplepill == true {
      @content;
    }
  }
  @else if $EpicAct == breakpoint and $filter == full {
    @if $redpill == false and $bluepill == true and $purplepill == false {
      @if $allbreakpoint-override == true {
        @content;
      }
      @else if $override-brkname == $breakpoint {
        @content;
      }
    }
  }
  @else if $EpicAct == important and $filter == full {
    $important-removal: normal;
    @if $redpill == true and $bluepill == false and $purplepill == false {
      @content;
    }
  }
}

@mixin splitter($string, $list, $filter) {
  $verb-prep: to-string(nth($list, 1));
  $verb: if(str-index($verb-prep, ","), str-replace($verb-prep, ","), $verb-prep);

  $splitter:
    /* Value Commands */
    if($verb == $sass-autoval, auto-val,
    if($verb == $sass-custoval, custo-val,
    if($verb == $sass-autovendor, auto-ven-val,

    /* Property Commands */
    if(chk-list($AVP, quote($string)), auto-ven-prop,
    if(chk-list($ATG, quote($string)), auto-type,

    /* Complete Autocode Commands */
    if(str-index($string, $sass-autoprop), auto-prop,
    if(str-index($string, $sass-custoprop), custo-prop,
    regular)))))));

  @if $splitter == $filter {

    @content;
  }
}

@mixin namebrker($EpicAct, $namebreak-feature, $breakpoint, $type: $Global-NameBreak-Separator) {
  @if $Enable-NameBrkname == yes and $EpicAct == breakpoint and $namebreak-feature == true {
    @if $type == direct-child {
      &#{"." + $breakpoint} {@content;}}
    @else if $type == child {
      &#{" ." + $breakpoint} {@content;}}
    @else if $type == namespace {
      &#{"\\:" + $breakpoint} {@content;}}
    @else if $type == default {
      &#{"--" + $breakpoint} {@content;}}
    @else if $type == default-under {
      &#{"__" + $breakpoint} {@content;}}
  }
  @else {@content;}
}
