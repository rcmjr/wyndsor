  //// 0 //////////// Applies last-minute augmentations

  @mixin receiver($propertyname, $propertyvalues, $propertyvalues-list, $valueslength, $toggle: null) {

    @if $toggle == vendor-prefix and $Enable-AVP == yes {

      @each $prefix in $vprefixes {
        #{'-' + $prefix + '-' + $propertyname}: $propertyvalues;
      }
      #{$propertyname}: $propertyvalues;
    }
    @else if $toggle == quote-it {
      $cnctr-list: remove($propertyvalues-list, $sass-autoquote);
      //$cnctr-str: map-tostring-qt($cnctr-list, ' '); Required for Atom Sass-Auto Compile
      //$cnctr-str-multi: to-string($cnctr-list); Required for Atom Sass-Auto Compile
      @if $valueslength == 2 {
        #{$propertyname}: $cnctr-list;}
      @else if $valueslength >= 3 {
        #{$propertyname}: $cnctr-list;}
    }
    @else if $toggle == inner-vendor-prefix {
      $cnctr-list: remove($propertyvalues-list, $sass-autovendor);
      $cnctr-str: map-tostring-qt($cnctr-list, ' ');
      @each $prefix in $vprefixes {
        #{$propertyname}: #{'-' + $prefix + '-' + $cnctr-str};
      }
      #{$propertyname}: $cnctr-list;
    }
    @else {
      #{$propertyname}: $propertyvalues;
    }

  }

  //// 1 //////////// Connects to tools or to augmentations
  @mixin lines($root-cnctr, $root-type, $cnctr, $type, $breakpoint, $EpicAct, $importantremoval: normal) {
    $root-cnctr: to-list($root-cnctr, $root-type);
    $root-cnctr-str: map-tostring($root-cnctr, ' ');
    $cnctr: if(type-of($cnctr) == string, str-to-list(unquote($cnctr), ' '), if(type-of($cnctr) == list, if($cnctr != (), to-list($cnctr, $type), ""), $cnctr));
    $cnctr-list: null;

    @if $importantremoval == normal {
      $cnctr-list: remove($cnctr, "important", true);
    }
    @else if $importantremoval == full-important {
      $cnctr-list: remove($cnctr, "!important", true);
      $cnctr-list: remove($cnctr, "important", true);
    }

    $cnctr-length: length($cnctr-list);
    $splitter-verb: nth($cnctr-list, 1);
    $splitter:
      /* Inner Commands */
      if($splitter-verb == $sass-autovalue-b, built-in,
      if($splitter-verb == $sass-autovalue-c, add-on,
      if($splitter-verb == $sass-autoquote, quote-it,
      if($splitter-verb == $sass-autovendor, inner-vendor-prefix,

      /* Auto Check Commands */
      if(chk-list($AVP, quote($root-cnctr-str)), vendor-prefix,
      if(chk-list($ATG, quote($root-cnctr-str)), auto-typography,

      /* Exterior Commands */
      if(str-index($root-cnctr-str, $sass-autoproperty), auto-property,
      none)))))));

    $custo-call: to-string($splitter-verb);
    $cnctr-str: map-tostring($cnctr-list, ' ');

    @if $splitter == auto-property {
      $cnctr-str: map-tostring($cnctr-list, ' ');
      @include toolbox($root-cnctr, $root-cnctr-str, $cnctr-list, $cnctr-str, $cnctr-length, $splitter, $custo-call, $breakpoint, $EpicAct);
    }
    @else if $splitter == vendor-prefix {
      $cnctr-str: map-tostring($cnctr-list, ' ');
      @include receiver($root-cnctr, $cnctr-str, $cnctr-list, $cnctr-length, $splitter);
    }
    @else if $splitter == auto-typography {
      $cnctr-str: map-tostring($cnctr-list, ' ');
      @include toolbox($root-cnctr, $root-cnctr-str, $cnctr-list, $cnctr-str, $cnctr-length, $splitter, $custo-call, $breakpoint, $EpicAct);
    }
    @else if ($cnctr-length > 1) {
      @if $splitter == built-in or $splitter == add-on {
        $cnctr-list:
          if($splitter == built-in, remove($cnctr-list, $sass-autovalue-b),
          if($splitter == add-on, remove($cnctr-list, $sass-autovalue-c),
          $cnctr-list));
        $cnctr-str: map-tostring($cnctr-list, ' ');
        @include toolbox($root-cnctr, $root-cnctr-str, $cnctr-list, $cnctr-str, $cnctr-length, $splitter, $custo-call, $breakpoint, $EpicAct);
      }
      @else if $splitter == quote-it or $splitter == inner-vendor-prefix {
        $cnctr-str: map-tostring($cnctr-list, ' ');
        @include receiver($root-cnctr, $cnctr-str, $cnctr-list, $cnctr-length, $splitter);
      }
      @else {
        @include receiver($root-cnctr, $cnctr-str, $cnctr-list, $cnctr-length, $splitter);
      }
    }
    @else {
      @include receiver($root-cnctr, $cnctr-str, $cnctr-list, $cnctr-length, $splitter);
    }
  }

  //// 2 //////////// Creates css properties or switches over to the lines
  @mixin switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $startkey, $startvalue, $breakpoint, $redswitch, $blueswitch, $override-brkname) {

    $aliasnames: ();
    $mold-verify: null;
    $rslt-link: null;
    $mold: null;
    $mold-verify: null;
    $brkpntcheck: null;
    $rslttotal: null;
    $brkpntgo: null;
    $aliastest1: null;
    $aliastest2: null;

    $subhands: to-string($startkey);
      $subhands-verify: if($subhands != null, $subhands, "nope");
      $sublefty: if(chk-list($watchlist, $subhands-verify), true, false);
      $subuppy: if(str-index($subhands-verify, $sass-child), true, false); // Checks for Class or ID child
      $subdowny: if(map-check($pseudos, $subhands-verify), true, false);

    // Checks and Balances Breakpoints and Base Keys
    $mold: to-list($startvalue, "keys");
    $mold-verify: to-string(if($mold != null, $mold, "nope"));

      @each $breakpoint, $breakpointvalue in $breakpoints {
        $replacement: if(str-index(to-string($mold-verify), $breakpoint), true, false);
        $rslt: append($rslt, $replacement);
      }
      $rslt: if(remove-duplicates(purge($rslt)) == (), false, true); // Breakpoints

      $importantcheck: if(str-index($mold-verify, ' important'), true, false);
      $rslt-imprtnt: if(remove-duplicates(purge($importantcheck)) == (), false, true); // Important
      $basemold: if(type-of($startvalue) == map, if($startvalue != (), to-list($startvalue, "keys"), ""), "");
      $basecheck: if(nth($basemold, 1) == base, true, false);
      $rslt-base: if(remove-duplicates(purge($basecheck)) == (), false, true);

    $override-brkname: if($override-brkname != null, $override-brkname, "nope");
      $breakpointcheck2: if(str-index($mold-verify, $override-brkname), true, false);
      $rslt-brkpnt2: if(remove-duplicates(purge($breakpointcheck2)) == (), false, true);

      @if $redswitch == true {
        $rslt-base-solve: true;
        $rslt-imprtnt-solve: true;
        $rslt-brkpnt-solve: false;
      }
      @else if $blueswitch == true {
        $rslt-base-solve: true;
        $rslt-imprtnt-solve: false;
        $rslt-brkpnt-solve: true;
      }

    @if $sublefty != true and $subuppy == false and $subdowny == false {

      $propval: to-string($startvalue);

      // First Level properties (no breakpoints, base or anything else but solid first level css)
      @if $redswitch == false and $blueswitch == false {
        @if $EpicAct == normal or $EpicAct == important {
          @if $rslt == false and $rslt-imprtnt == $rslt-imprtnt-solve and $rslt-base == false {
            @include lines($startkey, "keys", $startvalue, "keys", $breakpoint, $EpicAct);
          }
        }
      }
      @else if $redswitch == true and $blueswitch == false {
        @if $rslt == $rslt-brkpnt-solve {
          @include lines($startkey, "keys", $startvalue, "keys", $breakpoint, $EpicAct);
        }
      }
      @else if $blueswitch == true and $redswitch == false and $breakpoint == $override-brkname {
        @if $rslt == false and $rslt-imprtnt == $rslt-imprtnt-solve {
          @include lines($startkey, "keys", $startvalue, "keys", $breakpoint, $EpicAct, full-important);
        }
      }

      // Second Level properties (can be breakpoints, base, etc.)
      @each $key, $value in $startvalue {
        $mold: to-string($key);
          $mold-verify: if($mold != null, $mold, "nope");
          $basecheck: if(str-index($mold, base), true, false);
          $breakpointcheck: if($breakpoint != null, if(str-index($mold-verify, $breakpoint), true, false), "()");
          $breakpointcheck3: if(str-index($mold-verify, $override-brkname), true, false);
        $submold: to-string($value);
          $submold-verify: if($submold != null, $submold, "nope");
          $importantcheck: if(str-index($submold-verify, ' important'), true, false);

        $rslt-base: if(remove-duplicates(purge($basecheck)) == (), false, true);
        $rslt-imprtnt: if(remove-duplicates(purge($importantcheck)) == (), false, true);
        $rslt-brkpnt: if($rslt-brkpnt-solve != false, if(remove-duplicates(purge($breakpointcheck)) == (), false, true), false);
        $rslt-brkpnt3: if(remove-duplicates(purge($breakpointcheck3)) == (), false, true);

        $propval: to-string(to-list($value, "values"));

        @if $redswitch == false and $blueswitch == false {
          @if $rslt-base == $rslt-base-solve and $rslt-imprtnt == $rslt-imprtnt-solve and $rslt-brkpnt == $rslt-brkpnt-solve {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
          @else if $rslt-imprtnt == true and $rslt-brkpnt == true {
            @warn "Sorry, you can't have it both ways. If you'd like to make this important within a breakpoint just add an '!'";
          }
        }
        @else if $redswitch == true and $blueswitch == false {
          @if $rslt-base == $rslt-base-solve and $rslt-brkpnt == $rslt-brkpnt-solve {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
        }
        @else if $blueswitch == true and $redswitch == false and $breakpoint == $override-brkname {
          @if $rslt-brkpnt2 == true and $rslt-brkpnt3 == true {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
          @else if $rslt-brkpnt2 == false and $rslt-base == true {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
        }
      }
    }

    // Creats Children within Children, Subclasses or Pseudos
    @else if $subuppy == true {

        @each $key, $value in $startvalue {
          $mold: to-string($key);
          $mold-verify: if($mold != null, $mold, "nope");
          $linkcheck: if(str-index($mold-verify, 'name'), true, false);
          $rslt-link: if(remove-duplicates(purge($linkcheck)) == (), false, true);
          @if $rslt-link == true {
            @for $i from 1 through length($value) {
              $propval: to-string(nth($value, $i));

              @if if(str-index($propval, '+'), true, true) {
                $aliastest1: if(str-index($propval, '+'), str-replace($propval, '+', '%'), $propval);
                @if if(str-index($aliastest1, '_'), true, true) {
                  $aliastest2: if(str-index($aliastest1, '_'), str-replace($aliastest1, '_', '.'), $aliastest1);
                    @if if(str-index($aliastest2, '#'), true, true) {
                      $aliasnames: append($aliasnames, $aliastest2, comma);
                    }
                  }
                @else {
                  $aliasnames: append($aliasnames, $aliastest1, comma);
                }
              }
              @else {
                $aliasnames: append($aliasnames, $propval, comma);
              }
            }
          }
        }

        $alias-prime-prehand: str-replace(to-string($startkey), ' ', '');
        $alias-prime: str-replace($alias-prime-prehand, $sass-child, '');
        $alias-prime-childcheck: if(str-index($alias-prime, child), true, false);
        $alias-prime-reserve: null;

          @if $alias-prime-childcheck == true { // If the Child convention checks out, then it renders $alias-prime null
            $alias-prime-reserve: $alias-prime;
            $alias-prime: null;
          }
          @else { // Where as if there is a class or html name it does this:
            $alias-prime: if(chk-list($html-elements, $alias-prime),
              " " + $alias-prime,
              " ." + $alias-prime);
          }

          $aliasname: if($aliasnames != (), $aliasnames, unquote(""));
          $aliasname-s: $aliasname + unquote("");
          $aliasname-sc: if(str-index(to-string($alias-prime-reserve), "_") == 1, true, false);
          $aliasname-scs: if($aliasname-sc == true, str-slice($aliasname-s, 2, str-length($aliasname-s)), str-slice($aliasname-s, 1, str-length($aliasname-s)));

          $alias-prime-sc: if(str-index(to-string($alias-prime), "_") == 3, true, false);
          $alias-prime-scs: if($alias-prime-sc == true, str-slice($alias-prime, 4, str-length($alias-prime)), null);
          $alias-prime-scf: if($alias-prime-sc == true, if(chk-list($html-elements, $alias-prime-scs),
            $alias-prime-scs, str-insert($alias-prime-scs, ".", 1)), null);

          &#{
            if($alias-prime-sc == true, #{$alias-prime-scf}#{" " + $aliasname-scs},
            if($alias-prime != null, #{$alias-prime}#{" " + $aliasname-scs},
            $aliasname-scs)))}  {

          @each $key, $value in $startvalue {
            $subhands: to-string($key);
            $subrighty: if(map-check($pseudos, $subhands), true, false);
            $sublefty: if(str-index($subhands, $sass-subclass), true, false); // Checks for Sub-Classes/IDs
            $subdowny: if(str-index($subhands, $sass-namespace), true, false);
            $linkcheck: if(str-index($key, 'name'), true, false);

            @if $sublefty == false and $subrighty == false and $subdowny == false and $linkcheck == false{
              @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $key, $value, $breakpoint, $redswitch, $blueswitch, $override-brkname);
            }
            @else if $subrighty == true {
              &#{unquote(":")}#{$key} {
                @each $subprop, $subpropval in $value {
                  @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $override-brkname);
                }
              }
            }
            @else if $subdowny == true {
              &#{unquote("\:")}#{$key} {
                @each $subprop, $subpropval in $value {
                  @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $override-brkname);
                }
              }
            }
            @else if $sublefty == true {
              @warn "Creating subclasses within children this far down, isnt allowed.";
            }
          }
        }
      }

      @else if $subdowny == true {
        &#{unquote(":")}#{$startkey} {
          @each $subprop, $subpropval in $startvalue {
            @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $override-brkname);
          }
        }
      }
    }

  //// 3 //////////// Routes acceptable connections through to the switches/lines
  @mixin router($property, $propertyvalue, $value, $key, $breakpoint, $EpicAct, $breakpoint-override: false, $important-override: false, $override-brkname: null) {

    $rslt-imprtnt-solve: null !default;
    $rslt-base-solve: null !default;
    $rslt-brkpnt-solve: null !default;
    $redswitch: false !default;
    $blueswitch: false !default;
    $aliasnames: ();
    $rslt: (); // Breakpoint
    $rslt-imprtnt: (); // Important
    $rslt-base: (); // Base
    $property: to-string($property);

    @if $EpicAct == normal {
      $rslt-imprtnt-solve: false !default;
      $rslt-base-solve: true !default;
      $rslt-brkpnt-solve: false !default;

      @if $important-override == true {
        $redswitch: false;
        $blueswitch: false;
      }
      @else if $breakpoint-override == true {
        $blueswitch: false;
        $redswitch: false;
      }
    }
    @else if $EpicAct == important {
      $rslt-imprtnt-solve: true !default;
      $rslt-base-solve: true !default;
      $rslt-brkpnt-solve: false !default;

      @if $important-override == true {
        $redswitch: true;
        $blueswitch: false;
      }
      @else if $breakpoint-override == true {
        $blueswitch: false;
        $redswitch: false;
      }
    }
    @else if $EpicAct == breakpoint {
      $rslt-imprtnt-solve: false !default;
      $rslt-base-solve: false !default;
      $rslt-brkpnt-solve: true !default;

      @if $breakpoint-override == true {
        $blueswitch: true;
        $redswitch: false;
      }
      @else if $important-override == true {
        $redswitch: false;
        $blueswitch: false;
      }
    }

    //// ℹ︎ //////////// Removing or allowing extensions, pseudos and subclasses
      $hands: to-string($property);
        $lefty: if(map-check($pseudos, $hands), true, false);
        $righty: if(str-index($hands, $sass-subclass), true, false); // Checks for Sub-Classes/IDs
        $uppy: if(str-index($hands, $sass-child), true, false); // Checks for Class or ID child
        $thirdy: if(str-index($hands, $sass-namespace), true, false);

        @if $uppy == true and $righty == true {
          $uppy: true;
          $righty: false;
        }

    // For CSS Properties
    @if $lefty != true and $righty != true and $uppy != true and $thirdy != true {
      @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $property, $propertyvalue, $breakpoint, $redswitch, $blueswitch, $override-brkname);
    }

    // For Pseudos
    @else if $lefty == true {
      &#{unquote(_($pseudos, $property))} {
        @each $subprop, $subpropval in $propertyvalue {
          $subuppy: if(str-index(to-string($subprop), $sass-child), true, false); // Checks for Class or ID child
          @if $subuppy == false {
            @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $override-brkname);
          }
          @else if $subuppy == true {
            @include router($subprop, $subpropval, $propertyvalue, null, $breakpoint, $EpicAct);
          }
        }
      }
    }

    // For Sub-classes
    @else if $righty == true {
      &#{if($property != null, unquote("-"), '') + if(str-index($property, '_'), str-replace($property, _, ''), '')} {
        @each $subprop, $subpropval in $propertyvalue {
          @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $override-brkname);
        }
      }
    }

    // For Children
    @else if $uppy == true {

      @each $subprop, $subpropval in $propertyvalue {
        $mold: to-string($subprop);
        $mold-verify: if($mold != null, $mold, "nope");
        $linkcheck: if(str-index($mold-verify, 'name'), true, false);
        $rslt-link: if(remove-duplicates(purge($linkcheck)) == (), false, true);

        @if $rslt-link == true {
          @for $i from 1 through length($subpropval) {
            $propval: to-string(nth($subpropval, $i));
            $aliastest1: null;
            $aliastest2: null;

            @if if(str-index($propval, '+'), true, true) {
              $aliastest1: if(str-index($propval, '+'), str-replace($propval, '+', ' %'), $propval);
              @if if(str-index($aliastest1, '__') == true, true, true) {
                $aliastest2: if(str-index($aliastest1, '__'), str-replace($aliastest1, '__', ' .'), $aliastest1);
                  @if if(str-index($aliastest2, '#'), true, true) {
                    $aliasnames: append($aliasnames, " " + $aliastest2, comma);
                  }
                }
              @else {
                $aliasnames: append($aliasnames, $aliastest1, comma);
              }
            }
            @else {
              $aliasnames: append($aliasnames, $propval, comma);
            }
          }
        }
      }

      $alias-prime-prehand: str-replace(to-string($property), ' ', ''); // Removes any space anomolies
      $alias-prime: str-replace($alias-prime-prehand, $sass-child, ''); // Removes Children Key from $alias-prime
      $alias-prime-childcheck: if(str-index($alias-prime, child), true, false); // Checks to see if $alias-prime has the Children convention "child"
      $alias-prime-reserve: null;

        @if $alias-prime-childcheck == true { // If the Child convention checks out, then it renders $alias-prime null
          $alias-prime-reserve: $alias-prime;
          $alias-prime: null;
        }
        @else { // Where as if there is a class or html name it does this:
          $alias-prime: if(chk-list($html-elements, $alias-prime),
            " " + $alias-prime,
            unquote(" .") + $alias-prime);
        }

      $aliasname: if($aliasnames != (), $aliasnames, unquote(""));
      $aliasname-s: $aliasname + unquote("");
      $aliasname-sc: if(str-index(to-string($alias-prime-reserve), "_") == 1, true, false);
      $aliasname-scs: if($aliasname-sc == true, str-slice($aliasname-s, 2, str-length($aliasname-s)), str-slice($aliasname-s, 1, str-length($aliasname-s)));
      $alias-prime-sc: if(str-index(to-string($alias-prime), "_") == 3, true, false);
      $alias-prime-scs: if($alias-prime-sc == true, str-slice($alias-prime, 4, str-length($alias-prime)), null);
      $alias-prime-scf: if($alias-prime-sc == true, if(chk-list($html-elements, $alias-prime-scs),
        $alias-prime-scs, str-insert($alias-prime-scs, ".", 1)), null);

      &#{
        if($alias-prime-sc == true, #{$alias-prime-scf}#{" " + $aliasname-scs},
        if($alias-prime != null, #{$alias-prime}#{" " + $aliasname-scs},
        $aliasname-scs)))}  {

        @each $subprop, $subpropval in $propertyvalue {
          $subhands: to-string($subprop);
          $subrighty: if(map-check($pseudos, $subhands), true, false);
          $sublefty: if(str-index($subhands, $sass-subclass), true, false); // Checks for Sub-Classes/IDs
          $subuppy: if(str-index($subhands, $sass-child), true, false);
          $linkcheck: if(str-index($subhands, 'name'), true, false);

          @if $sublefty == false and $subrighty == false and $subuppy == false and $linkcheck == false {
            @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $override-brkname);
          }
          @else if $subrighty == true {
            &#{unquote(":")}#{$subprop} {
              @each $subsubprop, $subsubpropval in $subpropval {
                @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subsubprop, $subsubpropval, $breakpoint, $redswitch, $blueswitch, $override-brkname);
              }
            }
          }
          @else if $subuppy == true {
            @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $override-brkname);
          }
          @else if $sublefty == true {
            &#{if($subprop != null, unquote("-"), '') + if(str-index($subprop, '_'), str-replace($subprop, _, ''), '')} {
              @each $subsubprop, $subsubpropval in $subpropval {
                @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subsubprop, $subsubpropval, $breakpoint, $redswitch, $blueswitch, $override-brkname);
              }
            }
          }
        }
      }
    }
  }

  //// --- 4 - THE SWITCHBOARD --- ////////////////////////////
  @mixin switchboard($AlphaMap, $EpicAct, $breakpoint: null) {          //// 1 //////////// Creates mixin name and required variables.
                                                                        //
      @each $key, $value in $AlphaMap {                                 /////// a ///////// Breaks apart all of the first level keys and values from the Epic-Map.
                                                                        //
          $key-string: to-string($key);                                 // i -- Ensures the $key is a string.
          $type: null;                                                  // i -- Just enabling all the variables to work outside all conditions.
          $aliasnames: ();                                              //
          $aliasname: null;                                             //
          $exist-alias: null;                                           //
          $exist-html: null;                                            //
                                                                        //
            @if if(str-index($key-string, '#'), true, false) {          //// 2 //////////// This "if, else" checks each key for an identifier
              $type: "#";                                               /////// a ///////// CSS ID identifier
            }                                                           //
            @else if if(str-index($key-string, '+'), true, false) {     /////// b ///////// CSS Namespace identifier
              $type: "%";                                               //
            }                                                           //
            @else if chk-list($html-elements, $key) {                   /////// c ///////// CSS HTML identifier
              $type: "";                                                //
              $exist-html: true;                                        //
            }                                                           //
            @else {                                                     /////// d ///////// CSS Class identifier
              $type: ".";                                               //
            }                                                           //

            $mainname: $type + if(str-index($key-string, '#'), str-replace($key, '#', ''), if(str-index($key-string, '+'), str-replace($key, '+', ''), $key-string));
            $brkname: if($EpicAct == breakpoint, unquote('-' + $breakpoint), '');
            $aliasnames-str: null;
            $aliasnames-list2: null;
            $aliasbrk: if($EpicAct == breakpoint and $Include-AliasBrkname == yes, unquote('-' + $breakpoint), '');

            @each $property, $propertyvalue in $value {
              $exist-alias: chk-list($property, $sass-alterego);
              @if $exist-alias == true {
                @for $i from 1 through length($propertyvalue) {
                  $propval: if($propertyvalue != (), nth($propertyvalue, $i), "nope");
                  @if $propval != "nope" {
                    @if if(str-index($propval, '#'), true, false) {
                      $aliasnames: append($aliasnames, #{$propval}#{$aliasbrk}, comma);
                    }
                    @else if if(str-index($propval, '+'), true, false) {
                      $aliasnames: append($aliasnames, #{if(str-index($propval, '+'), str-replace($propval, '+', '%'), null)}#{$aliasbrk}, comma);
                    }
                    @else if chk-list($html-elements, $propval) {
                      @error "Sorry, you can`t use '#{$propval}' as an alias.";
                    }
                    @else {
                      $aliasnames: append($aliasnames, #{unquote(".")}#{$propval}#{$aliasbrk}, comma);
                    }
                  }
                  @else if $propval == "nope" {
                    $aliasnames: ();
                    @error "You should go ahead and remove the alias field from #{$mainname}`s map.";
                  }
                }
              }
            }

            $aliasname: if($aliasnames != (), $aliasnames, unquote(''));

        //// 2 //////////// Creates the classes, ids, subclasses and pseudos
          #{if($exist-html == true, $mainname, $mainname)}#{if($aliasname != null, unquote(', '), '')}#{if($aliasname != '', $aliasname, '')} {

            //// ℹ︎ //////////// Forces the switchboard to compile to the important section or a specific breakpoint.
            $important-override: false !default;
            $breakpoint-override: false !default;
            $override-brkname: null !default;

              @if $Enable-Overrides == yes {
                $impride: chk-override($lock: $value, $key: $sass-overrides, $metal: important);
                $important-override: if(remove-duplicates(purge($impride)) == (), false, true);
                $brkride: chk-override($lock: $value, $key: $sass-overrides, $metal: breakpoint);
                $breakpoint-override: if(remove-duplicates(purge($brkride)) == (), false, true);
                $override-brkname: if($breakpoint-override == true, _($AlphaMap, $key, $sass-overrides), null);
              }
            //// a //////////// Pushes specified class/id to the important section or breakpoint.
            @if $important-override == true and $EpicAct == important {
              @each $property, $propertyvalue in $value {
                @include router($property, $propertyvalue, $value, $mainname, $breakpoint, $EpicAct, $breakpoint-override, $important-override);
              }
            }
            @else if $breakpoint-override == true and $EpicAct == breakpoint {
              @each $property, $propertyvalue in $value {
                @include router($property, $propertyvalue, $value, $mainname, $breakpoint, $EpicAct, $breakpoint-override, $important-override, $override-brkname);
              }
            }

            //// b //////////// Regular classes/ids enter here
            @if $breakpoint-override == false and $important-override == false {
              @each $property, $propertyvalue in $value {
                @include router($property, $propertyvalue, $value, $mainname, $breakpoint, $EpicAct, $breakpoint-override, $important-override);
              }
            }
          }
      }
    }

  //// --- 5 - BREAKPOINT GENERATOR --- ////////////////////////////
  @mixin breakpointboard($AlphaMap, $EpicAct) {             //// 1 //////////// Creates mixin name and required variables.
    @each $break, $breakvalues in $breakpoints {            /////// a ///////// Breaks apart all of the breakpoint names and specs so the switchboard can run for each one in the list.
      @include brkpoint($breakvalues) {                     /////// b ///////// Runs the Breakpoint Auto-Code
        @include switchboard($AlphaMap, $EpicAct, $break);  /////// c ///////// Starts the Switchboard
      }
    }
  }
