@import "breakers.scss";

  //// 1 //////////// Connects to tools or to augmentations, filters into important or breakpoints
  @mixin lines($redline, $greenline, $var-name, $breakpoint, $importance-check, $important-check, $importance-check-wcomma, $important-check-wcomma, $EpicAct, $namebreak-feature, $important-removal: false, $customprops-feature: false) {

    $var-name: var-cleanup($var-name);
    // Property Names
    $redline: to-list($redline, "keys");
    $redline-str: map-tostring($redline, ' ');

    // Property Values
    $greenline-str: to-string($greenline);

      // Important Runtime
      $greenline-clean: if(str-index($greenline-str, ", !important"), str-replace($greenline-str, ", !important", " !important"),
                        if(str-index($greenline-str, ", important"), str-replace($greenline-str, ", important", ""),
                        if(str-index($greenline-str, " important"), str-replace($greenline-str, " important", ""), $greenline-str)));

        // Important Warnings/Disables
        @if $important-check == true and $importance-check == true {
          @error "Sorry, in '#{$redline-str}', you shouldn`t use both types of importance, try using only one.";
        }
        @if $Disable-ImportantRule == yes or $important-removal == true {
          $importance-check: false;
          $important-check: false;
          $importance-check-wcomma: false;
          $important-check-wcomma: false;
          $greenline-clean: if(str-index($greenline-str, ", !important"), str-replace($greenline-str, ", !important", ""),
                            if(str-index($greenline-str, " !important"), str-replace($greenline-str, " !important", ""),
                            if(str-index($greenline-str, ", important"), str-replace($greenline-str, ", important", ""),
                            if(str-index($greenline-str, " important"), str-replace($greenline-str, " important", ""), $greenline-str))));
        }

        // Custom Property Variables - Auto Individual Properties
        $custompropvar-check: if(str-index($greenline-clean, "#{$sass-autovar}"), true, false);
        $custompropvarfull-check: if(str-index($greenline-clean, "#{" " + $sass-autovar + "-full"}"), true, false);
        $greenline-clean: if(str-index($greenline-clean, "#{" " + $sass-autovar + "-full"}"), str-replace($greenline-clean, "#{" " + $sass-autovar + "-full"}", ""),
                          if(str-index($greenline-clean, "#{", " + $sass-autovar}"), str-replace($greenline-clean, "#{", " + $sass-autovar}", ""),
                          if(str-index($greenline-clean, "#{" " + $sass-autovar}"), str-replace($greenline-clean, "#{" " + $sass-autovar}", ""), $greenline-clean)));
        $var-name: str-replace(to-string($var-name), " ", "-");

        // Custom Property Variables - Variable Names and Customprops Switches
        $customprops-fetch: if($customprops-feature == true or $customprops-feature == true-all or $customprops-feature == true-full, true, false);
        $redline-custompropname: if($customprops-fetch == true or $custompropvar-check == true, '--' + $var-name + "-" + str-slice($redline-str, 1, 1), "");
        $redline-customprop: if($customprops-fetch == true or $custompropvar-check == true, 'var(--' + $var-name + "-" + str-slice($redline-str, 1, 1) + ')', "");


    $greenline: if(type-of($greenline-clean) == 'string', str-to-list($greenline-clean), if(type-of($greenline-clean) == 'list', if($greenline-clean != (), to-list($greenline-clean, "keys"), ""), $greenline-clean));
    $greenline-list: remove-comma($greenline);
    $greenline-str: map-tostring($greenline-list, ' ');
    $greenline-length: length($greenline-list);

    $greenverb-prep: to-string(nth($greenline-list, 1));
    $greenverb-list: remove($greenline-list, $greenverb-prep, true);
    $greenverb-length: length($greenverb-list);
    $greenverb-str: map-tostring($greenverb-list, ' ');

    // Line Options:
    // - auto-val // Wyndsor's Value Automations
    // - custo-val // Your Custom Value Automations
    // - auto-type // Automatically converts font-size and generates line-height
    // - auto-prop // Wyndsor's Property Automations
    // - custo-prop // Your Property Automations

    //// 1 //////////// Wyndsor's Property Automations
    @include splitter($redline-str, $greenline-list, auto-prop) {
      $splitter: auto-prop;
      @if $customprops-feature == true-all {
        #{$redline-str}: #{$redline-customprop};
      }
      @else {
        @include repeater($redline, $redline-str, $greenline-list, $greenline-str, $greenline-length, $splitter, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
        @include gen-graph($redline, $redline-str, $greenverb-list, $greenverb-str, $greenverb-length, $splitter, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
        @include instagram-css($redline, $redline-str, $greenline-list, $greenline-str, $greenline-length, $splitter, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
        @include animation-css($redline, $redline-str, $greenline-list, $greenline-str, $greenline-length, $splitter, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
        @include hover-css($redline, $redline-str, $greenline-list, $greenline-str, $greenline-length, $splitter, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
        @include fontawesome($redline, $redline-str, $greenline-list, $greenline-str, $greenline-length, $splitter, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
      }
    }

    //// 2 //////////// Your Property Automations
    @include splitter($redline-str, $greenline-list, custo-prop) {
      $splitter: custo-prop;
      @if $customprops-feature == true-all {
        @include namebrker($EpicAct, $namebreak-feature, $breakpoint, default-under) {#{$redline-str}: #{$redline-customprop};}
      }
      @else {
        @include crtrfone($redline, $redline-str, $greenverb-list, $greenverb-str, $greenverb-length, $splitter, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
      }
    }

    //// 4 //////////// Built-In Typography
    @include splitter($redline-str, $greenline-list, auto-type) {
      $greenline-list: remove($greenline-list, "!important", true);
      $greenline-str: if(str-index($greenline-str, "!important"), str-replace($greenline-str, "!important", ""), $greenline-str);
      $greenline-length: length($greenline-list);

      @if $Enable-ATG == yes {
        @if $customprops-fetch == false {
          @include gen-type($redline, $redline-str, $greenline-list, $greenline-str, $greenline-length, $breakpoint, $EpicAct, $namebreak-feature, $important-check);

        }
        @else if $customprops-fetch == true or $custompropvar-check == true {
          @include namebrker($EpicAct, $namebreak-feature, $breakpoint, default-under) {
            @if $redline-str == "font-size" {
              @if $custompropvarfull-check == true or $customprops-feature == true-full {
                #{$redline-custompropname}: #{$greenline-clean};
              }
              #{$redline-str}: #{$redline-customprop};
            }
            @else if $redline-str == unquote($sass-autotype) {
              font-size: #{unquote('var(--' + $var-name + '-font-size)')};
              line-height: #{unquote('var(--' + $var-name + '-line-height)')};
            }
          }
        }
      }
      @else if $Enable-ATG == no {
       @if $customprops-fetch == false {
          @if $redline-str == "font-size" {
            @include namebrker($EpicAct, $namebreak-feature, $breakpoint, default-under) {#{$redline-str}: #{$greenline-clean};}
          }
          @else if $redline-str == unquote($sass-autotype) {
            @include gen-type($redline, $redline-str, $greenline-list, $greenline-str, $greenline-length, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
          }
        }
        @else if $customprops-fetch == true or $custompropvar-check == true {
          @include namebrker($EpicAct, $namebreak-feature, $breakpoint, default-under) {
            @if $redline-str == "font-size" {
              @if $custompropvarfull-check == true or $customprops-feature == true-full {
                #{$redline-custompropname}: #{$greenline-clean};
              }
              #{$redline-str}: #{$redline-customprop};
            }
            @else if $redline-str == unquote($sass-autotype) {
              font-size: #{unquote('var(--' + $var-name + '-font-size)')};
              line-height: #{unquote('var(--' + $var-name + '-line-height)')};
            }
          }
        }
      }
    }

    //// 5 //////////// Value Automations
    @if ($greenline-length > 1) {

      // Wyndsor's Value Automations
      @include splitter($redline-str, $greenline-list, auto-val) {
        $splitter: auto-val;
        @if $customprops-feature == true-all {
          @include namebrker($EpicAct, $namebreak-feature, $breakpoint, default-under) {#{$redline-str}: #{$redline-customprop};}
        }
        @else if $custompropvar-check == true {
          @error "Sorry, you can`t use -var here.";
        }
        @else {
          @include gen-color ($redline, $redline-str, $greenverb-list, $greenverb-str, $greenverb-length, $splitter, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
          @include gen-pattern ($redline, $redline-str, $greenverb-list, $greenverb-str, $greenverb-length, $splitter, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
        }
      }

      // Your Value Automations
      @include splitter($redline-str, $greenline-list, custo-val) {
        $splitter: custo-val;
        @if $customprops-feature == true-all {
          @include namebrker($EpicAct, $namebreak-feature, $breakpoint, default-under) {#{$redline-str}: #{$redline-customprop};}
        }
        @else if $custompropvar-check == true {
          @error "Sorry, you can`t use -var here.";
        }
        @else {
          @include crtrfone($redline, $redline-str, $greenverb-list, $greenverb-str, $greenverb-length, $splitter, $breakpoint, $EpicAct, $namebreak-feature, $important-check);
        }
      }
    }

    //// 6 //////////// Regular CSS
    @include splitter($redline-str, $greenline-list, regular) {
      @include namebrker($EpicAct, $namebreak-feature, $breakpoint, default-under) {
        @if $customprops-fetch == true or $custompropvar-check == true {
          @if $custompropvarfull-check == true or $customprops-feature == true-full {
            #{$redline-custompropname}: #{$greenline-clean};
          }
          #{$redline-str}: #{$redline-customprop};
        }
        @else {
          #{$redline-str}: #{$greenline-clean};
        }
      }
    }
  }

  //// 2 //////////// Switches between regular and important/breakpoint CSS
  @mixin switch($EpicAct, $startkey, $startvalue, $var-name, $breakpoint, $importance-check, $important-check, $importance-check-wcomma, $important-check-wcomma, $namebreak-feature, $customprops-feature: false, $breakpoint-override: false, $allbreakpoint-override: false, $important-override: false, $override-brkname: null, $gm-override: false, $gm-override-2: false) {

    $property: to-string($startkey);
    $propvalue: $startvalue; // Might need to-string()
    $important-removal: null;
    $redpill: null;
    $bluepill: null;
    $purplepill: null;

    @if $important-override == true {
      @if $EpicAct == important {
        $redpill: true;
        $bluepill: false;
        $purplepill: false;
        $important-removal: true;
      }
      @else {
        $redpill: false;
        $bluepill: false;
        $purplepill: false;
      }
    }
    @else if $breakpoint-override == true {
      @if $EpicAct == breakpoint {
        $redpill: false;
        $bluepill: true;
        $purplepill: false;
        $important-removal: true;
      }
      @else {
        $redpill: false;
        $bluepill: false;
        $purplepill: false;
      }
    }
    @else if $allbreakpoint-override == true {
      @if $EpicAct == normal {
        $redpill: false;
        $bluepill: false;
        $purplepill: true;
        $important-removal: false;
      }
      @else if $EpicAct == breakpoint {
        $redpill: false;
        $bluepill: true;
        $purplepill: false;
        $important-removal: true;
      }
      @else {
        $redpill: false;
        $bluepill: false;
        $purplepill: false;
      }
    }
    @else {
      @if $EpicAct == important and $importance-check == true {
        $redpill: true;
        $bluepill: false;
        $purplepill: false;
        $important-removal: true;
      }
      @if $EpicAct == normal and $importance-check == false {
        $redpill: false;
        $bluepill: false;
        $purplepill: true;
        $important-removal: false;
      }
    }
    @if $breakpoint-override == true and $importance-check == true {
      @warn "Heads up, Wyndsor always picks breakpoints over importance, and '#{$var-name + ": " + $startkey}' has an important rule as well as a breakpoint.";
    }

    // For Regular CSS
    @include filterpoint(regular, $EpicAct, $redpill, $bluepill, $purplepill, $override-brkname, $allbreakpoint-override, $breakpoint) {
      @include lines($property, $propvalue, $var-name, $breakpoint, $importance-check, $important-check, $importance-check-wcomma, $important-check-wcomma, $EpicAct, $namebreak-feature, $important-removal, $customprops-feature);
    }
    // For Breakpoints and Important CSS
    @include filterpoint(full, $EpicAct, $redpill, $bluepill, $purplepill, $override-brkname, $allbreakpoint-override, $breakpoint) {
      @include lines($property, $propvalue, $var-name, $breakpoint, $importance-check, $important-check, $importance-check-wcomma, $important-check-wcomma, $EpicAct, $namebreak-feature, $important-removal, $customprops-feature);
    }
  }

  //// 3 //////////// Routes acceptable connections through to the switches/lines
  @mixin router($property, $propertyvalue, $value, $key, $var-name, $breakpoint, $EpicAct, $customprops-feature, $namebreak-feature, $gm-override, $gm-override-2, $breakpoint-override: false, $allbreakpoint-override: false, $important-override: false, $override-brkname: null) {

    $aliasnames: ();
    $property: to-string($property);
    $propvalue: to-string($propertyvalue);
    $namepropval: $propertyvalue;
    $off: off;

    // For CSS Properties
    @include brker ($property, property) {
      // Checks to see if the property is a map (which means it has a Base or Breakpoint).
      $baseORbreak-check: if(type-of($propertyvalue) == "map", true, false);
        // Regular CSS
        @if $baseORbreak-check == false {
          $importance-check: if(str-index(to-string($propertyvalue), " important"), true, false);
          $important-check: if(str-index(to-string($propertyvalue), " !important"), true, false);
          $importance-check-wcomma: if(str-index(to-string($propertyvalue), ", important"), true, false);
          $important-check-wcomma: if(str-index(to-string($propertyvalue), ", !important"), true, false);

          @include switch($EpicAct, $property, $propertyvalue, $var-name, $breakpoint, $importance-check, $important-check, $importance-check-wcomma, $important-check-wcomma, $namebreak-feature, $customprops-feature, $breakpoint-override, $allbreakpoint-override, $important-override, $override-brkname, $gm-override, $gm-override-2);
        }

        // Base or Breakpoint CSS
        @else if $baseORbreak-check == true {
          @each $key, $value in $propertyvalue {
            $base-filter: if($key == "base", true, false);
            $break-filter: if($key == $breakpoint, true, false);

            $propertyvalue: to-string($value);

            $importance-check: if(str-index(to-string($propertyvalue), " important"), true, false);
            $important-check: if(str-index(to-string($propertyvalue), " !important"), true, false);
            $importance-check-wcomma: if(str-index(to-string($propertyvalue), ", important"), true, false);
            $important-check-wcomma: if(str-index(to-string($propertyvalue), ", !important"), true, false);

            @if $base-filter == true {
              @include switch($EpicAct, $property, $propertyvalue, $var-name, $breakpoint, $importance-check, $important-check, $importance-check-wcomma, $important-check-wcomma, $namebreak-feature, $customprops-feature, $breakpoint-override, $allbreakpoint-override, $important-override, $override-brkname, $gm-override, $gm-override-2);
            }
            @else if $break-filter == true and $EpicAct == breakpoint {
              @if $Scope-BreakpointOverride == all {
                @if $breakpoint-override == true {
                  $override-brkname: $override-brkname;
                }
                @else {
                  $override-brkname: $breakpoint;
                  $breakpoint-override: true;
                }
              }
              @else if $Scope-BreakpointOverride == norm {
                $override-brkname: $breakpoint;
                $breakpoint-override: true;
              }
              $var-name: $var-name + "-" + $breakpoint;
              @include switch($EpicAct, $property, $propertyvalue, $var-name, $breakpoint, $importance-check, $important-check, $importance-check-wcomma, $important-check-wcomma, $namebreak-feature, $customprops-feature, $breakpoint-override, $allbreakpoint-override, $important-override, $override-brkname, $gm-override, $gm-override-2);
            }
          }
        }

    }

    // For everything else.
    @include brker ($property, name) {
      $var-name: append($var-name, $property);

      //// ℹ︎ //////////// Forces the router to compile to the important section or a specific breakpoint.
      @if $Enable-Overrides == yes and $gm-override == false {
        // Overrides
        $important-override: if(remove-duplicates(purge(chk-override($propertyvalue, important))) == (), false, true);
        $breakpoint-override: if(remove-duplicates(purge(chk-override($propertyvalue, breakpoint))) == (), false, true);
        $allbreakpoint-override: if(remove-duplicates(purge(chk-override($propertyvalue, all-breakpoints))) == (), false, true);
        // Finds Breakpoint name
        $override-brkname: chk-override($propertyvalue, breakpoint-name);
        $gm-override: if(remove-duplicates(purge(chk-override($propertyvalue, override-all))) == (), false, true);
      }
      @if $Enable-Features == yes and $gm-override-2 == false {
        // Enables
        $customprops-feature: if(remove-duplicates(purge(chk-override($propertyvalue, custom-property, enables))) == (), false, true);
        $customprops-feature: if(remove-duplicates(purge(chk-override($propertyvalue, custom-property-all, enables))) == (), $customprops-feature, true-all);
        $customprops-feature: if(remove-duplicates(purge(chk-override($propertyvalue, custom-property-full, enables))) == (), $customprops-feature, true-full);
        $namebreak-feature: if(remove-duplicates(purge(chk-override($propertyvalue, name-break, enables))) == (), false, true);
        $gm-override-2: if(remove-duplicates(purge(chk-override($propertyvalue, override-all, enables))) == (), false, true);
      }
      @each $subprop, $subpropval in $namepropval {
        @include router($subprop, $subpropval, $namepropval, null, $var-name, $breakpoint, $EpicAct, $customprops-feature, $namebreak-feature, $gm-override, $gm-override-2, $breakpoint-override, $allbreakpoint-override, $important-override, $override-brkname);
      }
    }
  }

  //// --- 4 - THE SWITCHBOARD --- ////////////////////////////
  @mixin switchboard($AlphaMap, $EpicAct, $breakpoint: null) {

      @each $key, $value in $AlphaMap {

          $key-string: to-string($key);
          $type: null;
          $var-name: ();
          $aliasnames: ();
          $aliasname: null;
          $exist-alias: null;
          $exist-html: null;
          $exist-rename: null;
          $customfeatures: ();

            @if if(str-index($key-string, $sass-rename), true, false) {
              $type: "";
              $exist-rename: true;
            }
            @else if if(str-index($key-string, '#'), true, false) {
              $type: "#";
            }
            @else if chk-list($html-elements, $key) {
              $type: "";
              $exist-html: true;
            }
            @else if if(str-index($key-string, '+'), true, false) {
              @error "Sorry, Namespaces aren`t allowed at this level. Trying creating a Class/ID then a Namespace.";
            }
            @else {
              $type: ".";
            }

            $prename-pre: if($exist-rename == true, $key-string, if(str-index($key-string, '#'), str-replace($key-string, '#', ''), $key-string));
            $prename-asterisk: if(str-index($prename-pre, '\\*'), str-replace($prename-pre, '\\*', '*'), $prename-pre);
            $prename: if($exist-rename == true, str-replace(str-replace($prename-asterisk, $sass-rename, ""), "\"", ""), $prename-asterisk);
            $mainname: $type + $prename;
            $brkname: if($EpicAct == breakpoint, unquote('-' + $breakpoint), '');
            $aliasbrk: if($EpicAct == breakpoint and $Include-AliasBrkname == yes and $Enable-NameBrkname != yes, unquote('-' + $breakpoint), '');
            $aliasbrk-switch: if($Include-AliasBrkname == yes and $EpicAct == breakpoint, true,
                              if($Include-AliasBrkname == yes and $EpicAct != breakpoint, false,
                              if($Include-AliasBrkname != yes, true, $aliasbrk-switch)));

            @if $aliasbrk-switch == true {
              @each $property, $propertyvalue in $value {
                $exist-alias: chk-list($property, $sass-alterego);
                @if $exist-alias == true {
                  @for $i from 1 through length($propertyvalue) {
                    $propval: if($propertyvalue != (), nth($propertyvalue, $i), "nope");
                    @if $propval != "nope" {
                      @if if(str-index($propval, '#'), true, false) {
                        $aliasnames: append($aliasnames, #{$propval}#{$aliasbrk}, comma);
                      }
                      @else if if(str-index($propval, '+'), true, false) {
                        @error "Sorry, you can`t create a Namespace this way, trying creating a class or ID first.";
                      }
                      @else if chk-list($html-elements, $propval) {
                        @error "Sorry, '#{$propval}' is an html name, and can`t be used as an alias.";
                      }
                      @else {
                        $aliasnames: append($aliasnames, #{unquote(".")}#{$propval}#{$aliasbrk}, comma);
                      }
                    }
                    @else if $propval == "nope" {
                      $aliasnames: ();
                      @error "You should go ahead and remove the alias field from #{$mainname}`s map.";
                    }
                  }
                }
              }
            }

            $var-name: $prename + "-";
            $aliasname: if($aliasnames != (), $aliasnames, unquote(''));


        //// 2 //////////// Creates the classes, ids, subclasses and pseudos
        #{if($exist-html == true, $mainname, $mainname)}#{if($aliasname != null, unquote(', '), '')}#{if($aliasname != '', $aliasname, '')} {

          //// ℹ︎ //////////// Forces the switchboard to compile to the important section or a specific breakpoint.
          $important-override: false !default;
          $breakpoint-override: false !default;
          $allbreakpoint-override: false !default;
          $override-brkname: null;
          $customprops-feature: false !default;
          $namebreak-feature: false !default;
          $gm-override: false !default;
          $gm-override-2: false !default;

          @if $Enable-Overrides == yes {
            // Overrides
            $important-override: if(remove-duplicates(purge(chk-override($value, important))) == (), false, true);
            $breakpoint-override: if(remove-duplicates(purge(chk-override($value, breakpoint))) == (), false, true);
            $allbreakpoint-override: if(remove-duplicates(purge(chk-override($value, all-breakpoints))) == (), false, true);
            $override-brkname: chk-override($value, breakpoint-name);
            $gm-override: if(remove-duplicates(purge(chk-override($value, override-all))) == (), false, true);
          }
          @if $Enable-Features == yes {
            // Enables
            $customprops-feature: if(remove-duplicates(purge(chk-override($value, custom-property, enables))) == (), false, true);
            $customprops-feature: if(remove-duplicates(purge(chk-override($value, custom-property-all, enables))) == (), $customprops-feature, true-all);
            $customprops-feature: if(remove-duplicates(purge(chk-override($value, custom-property-full, enables))) == (), $customprops-feature, true-full);
            $namebreak-feature: if(remove-duplicates(purge(chk-override($value, name-break, enables))) == (), false, true);
            $gm-override-2: if(remove-duplicates(purge(chk-override($value, override-all, enables))) == (), false, true);
          }

          //// a //////////// Pushes specified class/id to the important section or breakpoint.
          @each $property, $propertyvalue in $value {
            @include router($property, $propertyvalue, $value, $mainname, $var-name, $breakpoint, $EpicAct, $customprops-feature, $namebreak-feature, $gm-override, $gm-override-2, $breakpoint-override, $allbreakpoint-override, $important-override, $override-brkname);
          }
        }
      }
    }

  //// --- 5 - BREAKPOINT GENERATOR --- ////////////////////////////
  @mixin breakpointboard($AlphaMap, $EpicAct) {             //// 1 //////////// Creates mixin name and required variables.
    @each $break, $breakvalues in $breakpoints {            /////// a ///////// Breaks apart all of the breakpoint names and specs so the switchboard can run for each one in the list.
      @include brkpoint($breakvalues) {                     /////// b ///////// Runs the Breakpoint Auto-Code
        @include switchboard($AlphaMap, $EpicAct, $break);  /////// c ///////// Starts the Switchboard
      }
    }
  }
