@mixin repeater($redline, $redline-str, $greenverb-list, $greenverb-str, $greenverb-length, $splitter, $breakpoint, $EpicAct, $important-check) {
  $determiner: nth($greenverb-list, 1);
  $decider: if(str-index($determiner, wy-repeat), true, false);

  // Runs the Repeater if Called
  @if $decider == true {

    // Checks for Namespace Command
    $namespace: if(str-index($greenverb-str, "namespace"), name-true,
                false);
    $greenverb-list: if($namespace == name-true, remove($greenverb-list, "namespace", true),
                     $greenverb-list);
    $greenverb-length: length($greenverb-list);

     // Checks for All or Fill Command
     $check: if(str-index(nth($greenverb-list, $greenverb-length), "all-"), all-true,
             if(str-index(nth($greenverb-list, $greenverb-length), "fill-"), fill-true,
             false));

    // Repeats Numbers and Units
    @if $determiner == wy-repeat-number {
      // Pulls the Property Name to repeat
      $propertyname: nth($greenverb-list, 2);

      // Removes Either Command and Pulls Unit
      $unit: if($check == all-true, str-replace(nth($greenverb-list, $greenverb-length), "all-", ""),
             if($check == fill-true, str-replace(nth($greenverb-list, $greenverb-length), "fill-", ""),
             $Global-Default-Unit));
      $unit: if(str-index($unit, "\\"), str-replace($unit, "\\", ""), $unit);
      $greenverb-list: if($check == all-true or $check == fill-true,
                       remove($greenverb-list, nth($greenverb-list, $greenverb-length)),
                       $greenverb-list);

      // Filters based on All or Fill
      @if $check == all-true {
        @for $i from 3 through length($greenverb-list) {
          $number-clean: if(str-index(nth($greenverb-list, $i), "("), str-replace(nth($greenverb-list, $i), "(", ""),
                         if(str-index(nth($greenverb-list, $i), ")"), str-replace(nth($greenverb-list, $i), ")", ""),
                         nth($greenverb-list, $i)));
          $number: strip-units(to-number($number-clean));
          @if $namespace == name-true {
            &#{"\\:" + $number} {
              #{$propertyname}: #{$number + $unit};
            }
          }
          @else {
            &#{-$number} {
              #{$propertyname}: #{$number + $unit};
            }
          }
        }
      }
      // If Fill
      @else {
        @for $i from 3 through length($greenverb-list) {
          $number-clean: if(str-index(nth($greenverb-list, $i), "("), str-replace(nth($greenverb-list, $i), "(", ""),
                         if(str-index(nth($greenverb-list, $i), ")"), str-replace(nth($greenverb-list, $i), ")", ""),
                         nth($greenverb-list, $i)));
          $number: to-number($number-clean);
          $number-stripped: strip-units($number);
          $unit-check: unitless($number);

          @if $unit-check == true {
            @if $namespace == name-true {
              &#{"\\:" + $number-stripped} {
                #{$propertyname}: #{$number-stripped + $unit};
              }
            }
            @else {
              &#{-$number-stripped} {
                #{$propertyname}: #{$number-stripped + $unit};
              }
            }
          }
          @else if $unit-check == false {
            @if $namespace == name-true {
              &#{"\\:" + $number-stripped} {
                #{$propertyname}: #{$number};
              }
            }
            @else {
              &#{-$number-stripped} {
                #{$propertyname}: #{$number};
              }
            }
          }
        }
      }
    }

    // Repeats Anything
    @if $determiner == wy-repeat-any {

      // Blank Variables
      $label-start: null;
      $label-end: null;

      // Checks for List
      @for $i from 1 through $greenverb-length {
        $label-start: if(str-index(nth($greenverb-list, $i), "("), nth($greenverb-list, $i), $label-start);
        $label-end: if(str-index(nth($greenverb-list, $i), ")"), nth($greenverb-list, $i), $label-end);
      }

      // Creates start/end positions and reformats $greenverb-list.
      $label-position: index($greenverb-list, $label-start);
      $label-position-end: index($greenverb-list, $label-end);
      $isolate-pre: replace-nth($greenverb-list, $label-position, str-replace($label-start, "(", ""));
      $isolate: replace-nth($isolate-pre, $label-position-end, str-replace($label-end, ")", ""));

      // Starts property run
      @for $k from 2 to $label-position {

        // Declares property name
        $propertyname: nth($isolate, $k);

        // Collects label positions
        $y-val: ();
        @for $y from $label-position through $greenverb-length {
          $y-check: if(str-index(nth($isolate, $y), ":"), true, false);
          @if $y-check == true {
            $y-val: $y-val + "#{index($isolate, nth($isolate, $y))}";

          }
        }
        $y-val: unquote($y-val);
        $y-val-length: str-length($y-val);
        // Starts label run
        @for $j from $label-position through $greenverb-length {

          // Declares label name
          $label: if(str-index(nth($isolate, $j), ":"), true, false);

          // Only allows labels
          @if $label == true {

            $label-spot: $j;
            $label-stop: null;

            // Purges colon from lable name
            $label-name: str-replace(to-string(nth($isolate, $j)), ":", "");
            $label-stop-calc: str-index($y-val, to-string($label-spot)) + 1;

            @if $label-stop-calc > str-length($y-val) {
              $label-stop: length($isolate) + 1;
            }
            @else {
              $label-stop: to-number(str-slice($y-val, $label-stop-calc, $label-stop-calc));
            }

            $value: ();

            @for $z from ($label-spot + 1) to $label-stop {
              @if ($z + 1) != $label-stop {
                $value: $value + nth($isolate, $z) + " ";
              }
              @else {
                $value: $value + nth($isolate, $z);
              }
            }

            // Creates the entire sequence
            @if $namespace == false {
              &#{"-" + $label-name)} {
                #{$propertyname}: #{$value};
              }
            }
            @else if $namespace == name-true {
              &#{"\\:" + $label-name)} {
                #{$propertyname}: #{$value};
              }
            }
          }
        }
      }
    }

  }
}
