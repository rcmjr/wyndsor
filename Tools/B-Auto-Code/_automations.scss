//// --- FUNCTIONS --- ////////////////////////////

  //// 1 //////////// Deep Get Variable Key from Map
    @function _($map, $keys...) {
      @if $map != null {
        @each $key in $keys {
          @if $key != null {
            $map: map-get($map, $key);
          }
          @else {
            $map: "Sorry, nope";
          }
        }
        @return $map;
      }
      @else {
        @warn "Sorry, nope";
      }
    }

  //// 2 //////////// Override Check in Map
    @function override-check($map, $keys...) {
      @each $key in $keys {
          $map: map-get($map, $key);
      }
      @if $map == 'yes' {
        @return 'true';
      }
      @else if $map == 'no' {
        @return 'false';
      }
      @else {
        @return 'false';
      }
    }

  //// 3 //////////// Check Deep Keys
    @function map-check($map, $keys...) {
      @each $key in $keys {
        @if not map-has-key($map, $key) {
          @return false;
        }
        $map: map-get($map, $key);
      }

      @return true;
    }

  //// 4 //////////// Advanced Map Merge
    @function map-combine($map, $maps.../*, $deep */) {
      $last: nth($maps, -1);
      $deep: $last == true;
      $max: if($deep, length($maps) - 1, length($maps));

      @if $map == null or $maps == null {
        @return $map;
      }

      @else {
        // Loop through all maps in $maps...
        @for $i from 1 through $max {
          // Store current map
          $current: nth($maps, $i);

          // If not in deep mode, simply merge current map with map
          @if not $deep {
            $map: map-merge($map, $current);
          } @else {
            // If in deep mode, loop through all tuples in current map
            @each $key, $value in $current {

              // If value is a nested map and same key from map is a nested map as well
              @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
                // Recursive extend
                $value: map-combine(map-get($map, $key), $value, true);
              }

              // Merge current tuple with map
              $map: map-merge($map, ($key: $value));
            }
          }
        }
        @return $map;
      }
    }

  //// 5 //////////// Turn Map into List
    @function to-list($value, $keep: 'both') {
      $keep: if(index('keys' 'values', $keep), $keep, 'both');

      @if type-of($value) == 'map' {
        $keys: ();
        $values: ();

          @each $key, $val in $value {
            $keys: append($keys, $key);
            $values: append($values, $val);
          }

          @if $keep == 'keys' {
            @return $keys;
          } @else if $keep == 'values' {
            @return $values;
          } @else {
            @return zip($keys, $values);
          }
        }

        @return if(type-of($value) != 'list', ($value,), $value);

      }

  //// 6 //////////// Finds a Map's Depth
    @function map-depth($map) {
      $level: 1;

      @each $key, $value in $map {
        @if type-of($value) == "map" {
          $level: max(map-depth($value) + 1, $level);
        }
      }

      @return $level;
    }

  //// 7 //////////// Replace String Part
    @function str-replace($string, $search, $replace: '') {
      @if map-depth($string) > 1 {
        $testkey: to-list($string, 'both');
      }
      @else{
        $testkey: $string;
      }
      $index: str-index($string, $search);
      @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
      }
      @return $string;
    }

  //// 8 //////////// Convert to string
    @function map-tostring($list, $glue: '', $is-nested: false) {
      $rslt: null;

      @if length($list) == 0 {
        @return null;
      }

      @else {
        @for $i from 1 through length($list) {
          $e: nth($list, $i);

          @if type-of($e) == list {
            $rslt: unquote("#{$rslt}#{map-tostring($e, $glue, true)}");
          }

          @else {
            $rslt: if($i != length($list) or $is-nested, unquote("#{$rslt}#{$e}#{$glue}"), unquote("#{$rslt}#{$e}"));
          }
        }
        @return $rslt;
      }
    }

  //// 9 //////////// Preappend a List with new values
    @function prepend($list, $value) {
	    @return join($value, $list);
    }

  //// 11 //////////// Reverse a String
    @function str-reverse($string) {
      $reverse-string: "";
      @for $i from 1 through str-length($string) {
          $c: str-slice($string, $i, $i);
          $reverse-string: "#{$c}#{$reverse-string}";
      }
      @return $reverse-string;
    }

  //// 12 //////////// Find Last Part of List
    @function last($list) {
      @return nth($list, length($list));
    }

  //// 13 //////////// Filters out a list of terms by checking it against a map
    @function list-checkmake($list, $map, $type: keys) {
      $keys: ();
      $values: ();
      $truth: null;

      @for $i from 1 through length($list) {

        @each $key, $value in $map {
          $truth: chk-list($value, to-string(nth($list, $i)));

          @if $truth == true {
            @if $type == keys {
            $keys: append($keys, nth($list, $i));
            }
            @else if $type == values {
            $values: append($values, nth($list, $i));
            }
          }
        }
      }
      @if $type == keys {
        @if length($keys) > 0 {
          @return $keys;
        }
        @else if length($keys) == 0 {
          @return null;
        }
      }
      @else if $type == values {
        @if length($values) > 0 {
          @return $values;
        }
        @else if length($values) == 0 {
          @return null;
        }
      }
    }

  //// 14 //////////// Removes keys from maps
    @function map-removeKeys($map, $keys) {
    	$length: length($keys);
    	@if ($length > 1) {
    		$restMap: $map;
    		@each $key in $keys {
    			$restMap: map-remove($restMap, $key);
    		}
    		@return $restMap;
    	} @else {
    		@return map-remove($map, $keys);
    	}
    }

  //// 15 //////////// Removes keys from maps
    @function remove-duplicates($list, $recursive: false) {
      $rslt: ();

      @each $item in $list {
        @if not index($rslt, $item) {
          @if length($item) > 1 and $recursive {
            $rslt: append($rslt, remove-duplicates($item, $recursive));
          }
          @else {
            $rslt: append($rslt, $item);
          }
        }
      }

      @return $rslt;
    }

  //// 16 //////////// Convert string to list (must be used in @each)
    @function str-to-list($string, $separator: ' ', $startAt: 1) {
        $string: to-string($string);
        $workStr: str-slice($string,$startAt);
        $list: ();
        $indexOfFirstSpace: str-index($workStr,$separator);
        @if $indexOfFirstSpace == null {
            $list: ($workStr);
        } @else {
            $list: (str-slice($workStr, 1, $indexOfFirstSpace - 1));
            $list: join($list,str-to-list($workStr, $startAt: $indexOfFirstSpace + 1));
        }
        @return $list;
    }

  //// 16 //////////// Color conversion
    // Part 1
    @function _hex-to-dec($string) {
      $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
      $string: to-lower-case($string);
      $length: str-length($string);

      $dec: 0;
      @for $i from 1 through $length {
        $factor: 1 + (15 * ($length - $i));
        $index: index($hex, str-slice($string, $i, $i));
        $dec: $dec + $factor * ($index - 1);
      }

      @return $dec;
    }
    // Part 2
    @function _from-hex($string) {
      $string-lower: to-lower-case($string);
      $r: "";  $g: ""; $b: "";
      $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
      $length: str-length($string);
      $max: if($length == 4, 1, 2);

      // Check for length accuracy
      @if $length != 4 and $length != 7 {
        @return $string;
      }

      // Loop from the second character (omitting #)
      @for $i from 2 through $length {
        $c: str-slice($string-lower, $i, $i);

        // If wrong character, return
        @if index($hex, $c) == null {
          @return $string;
        }

        @if      str-length($r) < $max {
          $r: $r + $c;
        } @else if str-length($g) < $max {
          $g: $g + $c;
        } @else if str-length($b) < $max {
          $b: $b + $c;
        }
      }

      @if $length == 4 {
        $r: $r + $r;
        $g: $g + $g;
        $b: $b + $b;
      }

      @return rgb(_hex-to-dec($r), _hex-to-dec($g), _hex-to-dec($b));
    }

  //// 16 //////////// Convert string to list
    @function to-list-simple($value) {
      @return if(type-of($value) != list, ($value,), $value);
    }

  //// 17 //////////// Replace a specific value in a list
    @function replace-nth($list, $index, $value) {
      $rslt: null;
      $index: if($index == null, 'uh this', $index);
      @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
      }

      @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `replace-nth`.";
      }

      @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
      }

      @else {
        $rslt: ();
        $index: if($index < 0, length($list) + $index + 1, $index);

        @for $i from 1 through length($list) {
          @if $i == $index {
            $rslt: append($rslt, $value);
          }

          @else {
            $rslt: append($rslt, nth($list, $i));
          }
        }
      }

      @return $rslt;
    }

  //// 18 //////////// Purges false from a list.
    @function purge($list) {
      $rslt: ();

      @each $item in $list {
        @if $item != null
        and $item != false
        and $item != yolo
        and $item != "" {
          $rslt: append($rslt, $item);
        }
      }

      @return $rslt;
    }

  //// 19 //////////// Checks for custom overrides
    @function chk-override($propertyvalue, $override, $filter: overrides) {
      $lock: $propertyvalue;
      $type: "keys";
      $var-override: () !default;
      $imp-rep: null !default;
      $brk-rep: null !default;
      $cprop-rep: null !default;
      $mold-verify: null !default;
      $toll: 0 !default;
      $toll2: 0 !default;
      $miles: 0 !default;
      $turnpike: 0 !default;

      @each $groove, $pin in $lock {
        $lefthand: if(str-index(to-string($groove), unquote($sass-overrides)), true, false);
        $righthand: if(str-index(to-string($groove), unquote($sass-enables)), true, false);
        @if $lefthand == true and $filter == overrides {
          $mold: to-string(to-list($pin, $type));
          $mold-verify: if($mold != null, $mold, "nope");

          // Important Array
          @if $override == important {
            $imp-rep: if(str-index($mold-verify, $WFE-important), true, false);
            $var-override: append($var-override, $imp-rep);
          }

          // Breakpoint Array
          @else if $override == breakpoint {
            @each $breakpoint, $breakpointvalue in $breakpoints {
              $brk-rep: if(str-index($mold-verify, $breakpoint), true, false);
              $var-override: append($var-override, $brk-rep);
              $toll: if($brk-rep == true, 1 + $toll, 0 + $toll);
            }
          }

          // Breakpoint-Name Array
          @else if $override == breakpoint-name {
            @each $breakpoint, $breakpointvalue in $breakpoints {
              $brk-rep: if(str-index($mold-verify, $breakpoint), true, false);
              $var-override: if($brk-rep == true, append($var-override, $breakpoint), append($var-override, yolo));
              $toll: if($brk-rep == true, 1 + $toll, 0 + $toll);
            }
          }

          @else if $override == override-all {
            $ovrall-rep: if(str-index($mold-verify, $WFE-overrideall), true, false);
            $var-override: append($var-override, $ovrall-rep);
          }

          // Turnpike
          $imp-rep: if(str-index($mold-verify, $WFE-important), true, false);
          $miles: if($imp-rep == true, 1 + $miles, 0 + $miles);
          @each $breakpoint, $breakpointvalue in $breakpoints {
          $brk-rep: if(str-index($mold-verify, $breakpoint), true, false);
          $toll2: if($brk-rep == true, 1 + $toll2, 0 + $toll2);}

        }
        @else if $righthand == true and $filter == enables {
          $mold: to-string(to-list($pin, $type));
          $mold-verify: if($mold != null, $mold, "nope");
          // Custom Properties Array
          @if $override == custom-property {
            $cprop-rep: if(str-index($mold-verify, $WFE-customprops), true, false);
            $var-override: append($var-override, $cprop-rep);
          }
          @else if $override == custom-property-all {
            $cprop-rep: if(str-index($mold-verify, $WFE-customprops + "-all"), true, false);
            $var-override: append($var-override, $cprop-rep);
          }
          @else if $override == custom-property-full {
            $cprop-rep: if(str-index($mold-verify, $WFE-customprops + "-full"), true, false);
            $var-override: append($var-override, $cprop-rep);
          }
          @else if $override == override-all {
            $ovrall-rep: if(str-index($mold-verify, $WFE-overrideall), true, false);
            $var-override: append($var-override, $ovrall-rep);
          }
        }
        $var-override: purge($var-override);
      }
      $turnpike: $miles + $toll2;
      @if $override == breakpoint-name {
        @if $var-override == () {
          @return $var-override;
        }
        @else if $var-override != () {
          @if $toll > 1 {
            @error "Sorry, you cant apply more than one breakpoint here.";
          }
          @else {@return $var-override;}
        }
      }
      @else {
        @if $var-override == () {
          @return $var-override;
        }
        @else if $var-override != () {
          @if $toll > 1 {
            @error "Sorry, you cant apply more than one breakpoint here.";
          }
          @else if $turnpike > 1 {
            @error "Sorry, you cant have it both ways, go with a breakpoint or importance.";
          }
          @else {@return to-string($var-override);}
        }
      }
    }

  //// 20 //////////// Removes all stated values from a list
    @function remove($list, $value, $recursive: false) {
      $result: ();

      @for $i from 1 through length($list) {
        @if type-of(nth($list, $i)) == list and $recursive {
          $result: append($result, remove(nth($list, $i), $value, $recursive));
        }

        @else if nth($list, $i) != $value {
          $result: append($result, nth($list, $i));
        }
      }

      @return $result;
    }

  //// 22 //////////// Converts list to string
    @function to-string($value) {
      @return inspect($value);
    }

  //// 21 //////////// Removes all stated values from a list
    @function remove-comma($list) {
      $result: ();
      @if $list != () {
        @for $i from 1 through length($list) {
          $i-pre: to-string(nth($list, $i));
          $i-verb: str-replace($i-pre, unquote(","));
          $result: append($result, $i-verb, space);
        }
        @return $result;
      }
      @else {
        @return $list;
      }
    }

  //// 21 //////////// Removes all stated values from a list
    @function add-commas($list) {
      $result: ();
      @if $list != () {
        @for $i from 1 through length($list) {
          $i-verb: nth($list, $i);
          $result: append($result, $i-verb, comma);
        }
        @return $result;
      }
      @else {
        @return $list;
      }
    }
  //// 23 //////////// Check to see if a term exists in a List
    @function chk-list($list, $term) {
      $rslt: null;
      $list-rslt: ();
      $term: to-string($term);
      $term: if($term == "_", unquote($term), if($term == null, nope, $term));

        @for $i from 1 through length($list) {
          @if nth($list, $i) == $term {
            $list-rslt: true;
          }
          @else {
            $list-rslt: false;
          }
          $rslt: append($rslt, $list-rslt);
        }
      @return if(purge($rslt) == (), false, true);
    }

  //// 24 //////////// Convert String to Number
    @function to-number($value) {
    @if type-of($value) == 'number' {
      @return $value;
    } @else if type-of($value) != 'string' {
      $_: log('Value for `to-number` should be a number or a string.');
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through str-length($value) {
      $character: str-slice($value, $i, $i);

      @if not (index(map-keys($numbers), $character) or $character == '.') {
        @return to-length(if($minus, -$result, $result), str-slice($value, $i))
      }

      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }

    @return if($minus, -$result, $result);;
  }

  //// 25 //////////// Removes Unit from Number

  @function to-number($value) {
    @if type-of($value) == 'number' {
      @return $value;
    } @else if type-of($value) != 'string' {
      $_: log('Value for `to-number` should be a number or a string.');
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through str-length($value) {
      $character: str-slice($value, $i, $i);

      @if not (index(map-keys($numbers), $character) or $character == '.') {
        @return to-length(if($minus, -$result, $result), str-slice($value, $i))
      }

      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
    @return if($minus, -$result, $result);
  }

  @function strip-units($number) {
   @if type-of($number) == 'number' and not unitless($number) {
     @return $number / ($number * 0 + 1);
   }
   @else {
     @return $number;
   }
  }

  //// 26 //////////// Pulls First Entry in List
  @function list-first($list) {
     @return nth($list, 1);
  }

//// --- END FUNCTIONS --- ////////////////////////
