//// ▸▸▸ UPPERMOST FUNDAMENTAL IMPORTS ▸▸▸ ////
@import 'plugins/Bourbon/bourbon.scss';


//// --- FUNCTIONS --- ////////////////////////////

  //// 1 //////////// Deep Get Variable Key from Map
    @function _($map, $keys...) {
      @if $map != null {
        @each $key in $keys {
          @if $key != null {
            $map: map-get($map, $key);
          }
          @else {
            $map: "Sorry, nope";
          }
        }
        @return $map;
      }
      @else {
        @warn "Sorry, nope";
      }
    }

  //// 2 //////////// Override Check in Map
    @function override-check($map, $keys...) {
      @each $key in $keys {
          $map: map-get($map, $key);
      }
      @if $map == 'yes' {
        @return 'true';
      }
      @else if $map == 'no' {
        @return 'false';
      }
      @else {
        @return 'false';
      }
    }

  //// 3 //////////// Check Deep Keys
    @function map-check($map, $keys...) {
      @each $key in $keys {
        @if not map-has-key($map, $key) {
          @return false;
        }
        $map: map-get($map, $key);
      }

      @return true;
    }

  //// 5 //////////// Advanced Map Merge
    @function map-combine($map, $maps.../*, $deep */) {
    $last: nth($maps, -1);
    $deep: $last == true;
    $max: if($deep, length($maps) - 1, length($maps));

    // Loop through all maps in $maps...
    @for $i from 1 through $max {
      // Store current map
      $current: nth($maps, $i);

      // If not in deep mode, simply merge current map with map
      @if not $deep {
        $map: map-merge($map, $current);
      } @else {
        // If in deep mode, loop through all tuples in current map
        @each $key, $value in $current {

          // If value is a nested map and same key from map is a nested map as well
          @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
            // Recursive extend
            $value: map-combine(map-get($map, $key), $value, true);
          }

          // Merge current tuple with map
          $map: map-merge($map, ($key: $value));
        }
      }
    }

    @return $map;
  }

  //// 6 //////////// Turn Map into List
    @function to-list($value, $keep: 'both') {
      $keep: if(index('keys' 'values', $keep), $keep, 'both');

      @if type-of($value) == 'map' {
        $keys: ();
        $values: ();

          @each $key, $val in $value {
            $keys: append($keys, $key);
            $values: append($values, $val);
          }

          @if $keep == 'keys' {
            @return $keys;
          } @else if $keep == 'values' {
            @return $values;
          } @else {
            @return zip($keys, $values);
          }
        }

        @return if(type-of($value) != 'list', ($value,), $value);

      }

  //// 7 //////////// Finds a Map's Depth
      @function map-depth($map) {
        $level: 1;

        @each $key, $value in $map {
          @if type-of($value) == "map" {
            $level: max(map-depth($value) + 1, $level);
          }
        }

        @return $level;
      }

  //// 8 //////////// Replace String Part
    @function str-replace($string, $search, $replace: '') {
      @if map-depth($string) > 1 {
        $testkey: to-list($string, 'both');
      }
      @else{
        $testkey: $string;
      }
      $index: str-index($string, $search);
      @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
      }
      @return $string;
    }

  //// 9 //////////// Convert to string
    @function map-tostring($list, $glue: '', $is-nested: false) {
      $result: null;

      @if length($list) == 0 {
        @return null;
      }

      @else {
        @for $i from 1 through length($list) {
          $e: nth($list, $i);

          @if type-of($e) == list {
            $result: $result#{map-tostring($e, $glue, true)};
          }

          @else {
            $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
          }
        }
        @return $result;
      }
    }

  //// 10 //////////// Preappend a List with new values
    @function prepend($list, $value) {
	    @return join($value, $list);
    }

  //// 11 //////////// Check to see if a term exists in a map
    @function chk-existence($map, $term, $true: true, $false: false) {
      $result: null;
      $term: if($term == "_", unquote($term), $term);
      $term: if($term == null, nope, $term);

      @if type-of($map) == "map" {
        @if str-index(map-tostring($map), quote($term)) {
          $result: $true;
        }
        @else {
          $result: $false;
        }
      }
      @else if type-of($map) == "string" {
        @if str-index($map, quote($term)) {
          $result: $true;
        }
        @else {
          $result: $false;
        }
      }
      @return $result;
    }

  //// 12 //////////// Reverse a String
    @function str-reverse($string) {
      $reverse-string: "";
      @for $i from 1 through str-length($string) {
          $c: str-slice($string, $i, $i);
          $reverse-string: "#{$c}#{$reverse-string}";
      }
      @return $reverse-string;
    }

  //// 13 //////////// Find Last Part of List
    @function last($list) {
      @return nth($list, length($list));
    }

  //// 14 //////////// Filters out a list of terms by checking it against a map
    @function list-checkmake($list, $map, $type: keys) {
      $keys: ();
      $values: ();
      $truth: null;

      @for $i from 1 through length($list) {

        @each $key, $value in $map {
          $truth: chk-existence($value, map-tostring(nth($list, $i)));

          @if $truth == true {
            @if $type == keys {
            $keys: append($keys, nth($list, $i));
            }
            @else if $type == values {
            $values: append($values, nth($list, $i));
            }
          }
        }
      }
      @if $type == keys {
        @if length($keys) > 0 {
          @return $keys;
        }
        @else if length($keys) == 0 {
          @return null;
        }
      }
      @else if $type == values {
        @if length($values) > 0 {
          @return $values;
        }
        @else if length($values) == 0 {
          @return null;
        }
      }
    }

  //// 15 //////////// Removes keys from maps
    @function map-removeKeys($map, $keys) {
    	$length: length($keys);
    	@if ($length > 1) {
    		$restMap: $map;
    		@each $key in $keys {
    			$restMap: map-remove($restMap, $key);
    		}
    		@return $restMap;
    	} @else {
    		@return map-remove($map, $keys);
    	}
    }

  //// 16 //////////// Removes keys from maps
    @function remove-duplicates($list, $recursive: false) {
      $result: ();

      @each $item in $list {
        @if not index($result, $item) {
          @if length($item) > 1 and $recursive {
            $result: append($result, remove-duplicates($item, $recursive));
          }
          @else {
            $result: append($result, $item);
          }
        }
      }

      @return $result;
    }

    //// 17 //////////// Convert string to list (must be used in @each)
      @function str-to-list($string, $separator: ' ', $startAt: 1) {
          $workStr: str-slice($string,$startAt);
          $list: ();
          $indexOfFirstSpace: str-index($workStr,$separator);
          @if $indexOfFirstSpace == null {
              $list: ($workStr);
          } @else {
              $list: (str-slice($workStr, 1, $indexOfFirstSpace - 1));
              $list: join($list,str-to-list($workStr, $startAt: $indexOfFirstSpace + 1));
          }
          @return $list;
      }

      //// 18 //////////// Replace a specific value in a list
      @function replace-nth($list, $index, $value) {
        $result: null;
        $index: if($index == null, 'uh this', $index);
        @if type-of($index) != number {
          @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
        }

        @else if $index == 0 {
          @warn "List index 0 must be a non-zero integer for `replace-nth`.";
        }

        @else if abs($index) > length($list) {
          @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
        }

        @else {
          $result: ();
          $index: if($index < 0, length($list) + $index + 1, $index);

          @for $i from 1 through length($list) {
            @if $i == $index {
              $result: append($result, $value);
            }

            @else {
              $result: append($result, nth($list, $i));
            }
          }
        }

        @return $result;
      }

      //// 19 //////////// Purges false from a list.
      @function purge($list) {
        $result: ();

        @each $item in $list {
          @if $item != null
          and $item != false
          and $item != "" {
            $result: append($result, $item);
          }
        }

        @return $result;
      }

      //// 20 //////////// Routes passible criteria to their intended executables
      @function router($lock, $key: null, $metal: null, $level: One-Level, $depth: null, $type: "keys") {
        $result: ();
        $replacement: null;
        @if $level == One-Level {
          $mold: map-tostring(to-list($lock, $type), ' ');
          $mold-verify: if($mold != null, $mold, "nope");
          $replacement: if(str-index($mold-verify, if($key != null, $key, "nope")), true, false);
          $result: purge(append($result, $replacement));
          }
        @else if $level == Two-Levels {
          @each $groove, $pin in $lock {
            $replacement: null;
            $leftydeft: if(str-index($groove, unquote($key)), true, false);
            @if $leftydeft == true {
              $mold: map-tostring(to-list($pin, $type), ' ');
              $mold-verify: if($mold != null, $mold, "nope");
              $replacement: if(str-index($mold-verify, $metal), true, false);
              $result: append($result, $replacement);

            }
          }
          $result: purge($result);
        }
        @if $result == () {
          @return null;
        }
        @else if $result != () {
          @return map-tostring($result);
        }
      }

      //// 20 //////////// Routes passible criteria to their intended executables
      @mixin router2($property, $propertyvalue, $value, $breakpoint, $type, $filter) {

        // Removing or allowing extensions, pseudos and subclasses
        $hands: map-tostring(to-list($property, "keys"), ' ');
        $lefty: if(map-check($extensions, $hands) or map-check($pseudos, $hands) or str-index($hands, '_'), true, false);
        $righty: if(map-check($pseudos, $hands) or str-index($hands, '_'), true, false);
        // Removing or allowing breakpoints
        $feet: map-tostring(to-list($propertyvalue, "keys"), ' ');
        $leftfoot: if(map-check($breakpoints, $feet), true, false);

        // Checks and Balances Breakpoints and Base Keys
        $mold: map-tostring(to-list($propertyvalue, "keys"), ' ');
        $mold-verify: if($mold != null, $mold, "nope");
        $result: ();
          @each $breakpoint, $breakpointvalue in $breakpoints {
            $replacement: if(str-index($mold-verify, $breakpoint), true, false);
            $result: append($result, $replacement);
          }
          $result: remove-duplicates(purge($result)); // Breakpoints
        $result-base: (); // Base

        // For Regular CSS
        @if $lefty != true and $type == Regular-Properties {

          // Regular properties
          @if $filter == No-Breakpoints and $leftfoot == false and $result == () {
            #{to-list($property, "keys")}: #{to-list($propertyvalue, "keys")};
          }

          // Regular properties declared in "base" key
          @else if $filter == No-Breakpoints and $leftfoot == false {
            @each $subprop, $subpropval in $propertyvalue {
              $mold: map-tostring($subprop);
              $mold-verify: if($mold != null, $mold, "nope");
              $replacement2: if(str-index($mold-verify, base), true, false);
              $result-base: remove-duplicates(purge($replacement2));
              @if $result-base != () {#{to-list($property, "keys")}: #{to-list($subpropval, "values")};}
            }
          }
        }
        // For Pseudos and SubClasses
        @else if $righty == true and $type == (Pseudos or Subclasses) {
          @content;
        }
      }

//// --- END FUNCTIONS --- ////////////////////////

//// --- MIXINS --- ////////////////////////////

  //// 1 //////////// Check to run a 2 Level Property
  @mixin brk-jack($list, $validator) {
    @for $i from 1 through length($list) {
      @if nth($list, $i) == $validator {
        @content;
      }
      @else {
        // Fires Blank
      }
    }
  }

//// ▾▾▾ NETHERMOST FUNDAMENTAL IMPORTS ▾▾▾ ////
@import 'plugins/Modular-Scale/tc+modular-scale.scss';
