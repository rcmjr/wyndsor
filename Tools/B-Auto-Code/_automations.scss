//// ▸▸▸ UPPERMOST FUNDAMENTAL IMPORTS ▸▸▸ ////
@import 'plugins/Bourbon/bourbon.scss';


//// --- FUNCTIONS --- ////////////////////////////

  //// 1 //////////// Deep Get Variable Key from Map
    @function _($map, $keys...) {
      @if $map != null {
        @each $key in $keys {
          @if $key != null {
            $map: map-get($map, $key);
          }
          @else {
            $map: "Sorry, nope";
          }
        }
        @return $map;
      }
      @else {
        @warn "Sorry, nope";
      }
    }

  //// 2 //////////// Override Check in Map
    @function override-check($map, $keys...) {
      @each $key in $keys {
          $map: map-get($map, $key);
      }
      @if $map == 'yes' {
        @return 'true';
      }
      @else if $map == 'no' {
        @return 'false';
      }
      @else {
        @return 'false';
      }
    }

  //// 3 //////////// Check Deep Keys
    @function map-check($map, $keys...) {
      @each $key in $keys {
        @if not map-has-key($map, $key) {
          @return false;
        }
        $map: map-get($map, $key);
      }

      @return true;
    }

  //// 5 //////////// Advanced Map Merge
    @function map-combine($map, $maps.../*, $deep */) {
    $last: nth($maps, -1);
    $deep: $last == true;
    $max: if($deep, length($maps) - 1, length($maps));

    // Loop through all maps in $maps...
    @for $i from 1 through $max {
      // Store current map
      $current: nth($maps, $i);

      // If not in deep mode, simply merge current map with map
      @if not $deep {
        $map: map-merge($map, $current);
      } @else {
        // If in deep mode, loop through all tuples in current map
        @each $key, $value in $current {

          // If value is a nested map and same key from map is a nested map as well
          @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
            // Recursive extend
            $value: map-combine(map-get($map, $key), $value, true);
          }

          // Merge current tuple with map
          $map: map-merge($map, ($key: $value));
        }
      }
    }

    @return $map;
  }

  //// 6 //////////// Turn Map into List
    @function to-list($value, $keep: 'both') {
      $keep: if(index('keys' 'values', $keep), $keep, 'both');

      @if type-of($value) == 'map' {
        $keys: ();
        $values: ();

          @each $key, $val in $value {
            $keys: append($keys, $key);
            $values: append($values, $val);
          }

          @if $keep == 'keys' {
            @return $keys;
          } @else if $keep == 'values' {
            @return $values;
          } @else {
            @return zip($keys, $values);
          }
        }

        @return if(type-of($value) != 'list', ($value,), $value);

      }

  //// 7 //////////// Finds a Map's Depth
      @function map-depth($map) {
        $level: 1;

        @each $key, $value in $map {
          @if type-of($value) == "map" {
            $level: max(map-depth($value) + 1, $level);
          }
        }

        @return $level;
      }

  //// 8 //////////// Replace String Part
    @function str-replace($string, $search, $replace: '') {
      @if map-depth($string) > 1 {
        $testkey: to-list($string, 'both');
      }
      @else{
        $testkey: $string;
      }
      $index: str-index($string, $search);
      @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
      }
      @return $string;
    }

  //// 9 //////////// Convert to string
    @function map-tostring($list, $glue: '', $is-nested: false) {
      $rslt: null;

      @if length($list) == 0 {
        @return null;
      }

      @else {
        @for $i from 1 through length($list) {
          $e: nth($list, $i);

          @if type-of($e) == list {
            $rslt: unquote("#{$rslt}#{map-tostring($e, $glue, true)}");
          }

          @else {
            $rslt: if($i != length($list) or $is-nested, unquote("#{$rslt}#{$e}#{$glue}"), unquote("#{$rslt}#{$e}"));
          }
        }
        @return $rslt;
      }
    }

  //// 10 //////////// Preappend a List with new values
    @function prepend($list, $value) {
	    @return join($value, $list);
    }

  //// 11 //////////// Check to see if a term exists in a map
    @function chk-existence($map, $term, $true: true, $false: false) {
      $rslt: null;
      $term: if($term == "_", unquote($term), $term);
      $term: if($term == null, nope, $term);

      @if type-of($map) == "map" {
        @if str-index(map-tostring($map), quote($term)) {
          $rslt: $true;
        }
        @else {
          $rslt: $false;
        }
      }
      @else if type-of($map) == "string" {
        @if str-index($map, quote($term)) {
          $rslt: $true;
        }
        @else {
          $rslt: $false;
        }
      }
      @return $rslt;
    }

  //// 12 //////////// Reverse a String
    @function str-reverse($string) {
      $reverse-string: "";
      @for $i from 1 through str-length($string) {
          $c: str-slice($string, $i, $i);
          $reverse-string: "#{$c}#{$reverse-string}";
      }
      @return $reverse-string;
    }

  //// 13 //////////// Find Last Part of List
    @function last($list) {
      @return nth($list, length($list));
    }

  //// 14 //////////// Filters out a list of terms by checking it against a map
    @function list-checkmake($list, $map, $type: keys) {
      $keys: ();
      $values: ();
      $truth: null;

      @for $i from 1 through length($list) {

        @each $key, $value in $map {
          $truth: chk-existence($value, map-tostring(nth($list, $i)));

          @if $truth == true {
            @if $type == keys {
            $keys: append($keys, nth($list, $i));
            }
            @else if $type == values {
            $values: append($values, nth($list, $i));
            }
          }
        }
      }
      @if $type == keys {
        @if length($keys) > 0 {
          @return $keys;
        }
        @else if length($keys) == 0 {
          @return null;
        }
      }
      @else if $type == values {
        @if length($values) > 0 {
          @return $values;
        }
        @else if length($values) == 0 {
          @return null;
        }
      }
    }

  //// 15 //////////// Removes keys from maps
    @function map-removeKeys($map, $keys) {
    	$length: length($keys);
    	@if ($length > 1) {
    		$restMap: $map;
    		@each $key in $keys {
    			$restMap: map-remove($restMap, $key);
    		}
    		@return $restMap;
    	} @else {
    		@return map-remove($map, $keys);
    	}
    }

  //// 16 //////////// Removes keys from maps
    @function remove-duplicates($list, $recursive: false) {
      $rslt: ();

      @each $item in $list {
        @if not index($rslt, $item) {
          @if length($item) > 1 and $recursive {
            $rslt: append($rslt, remove-duplicates($item, $recursive));
          }
          @else {
            $rslt: append($rslt, $item);
          }
        }
      }

      @return $rslt;
    }

    //// 17 //////////// Convert string to list (must be used in @each)
      @function str-to-list($string, $separator: ' ', $startAt: 1) {
          $workStr: str-slice($string,$startAt);
          $list: ();
          $indexOfFirstSpace: str-index($workStr,$separator);
          @if $indexOfFirstSpace == null {
              $list: ($workStr);
          } @else {
              $list: (str-slice($workStr, 1, $indexOfFirstSpace - 1));
              $list: join($list,str-to-list($workStr, $startAt: $indexOfFirstSpace + 1));
          }
          @return $list;
      }

      //// 18 //////////// Replace a specific value in a list
      @function replace-nth($list, $index, $value) {
        $rslt: null;
        $index: if($index == null, 'uh this', $index);
        @if type-of($index) != number {
          @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
        }

        @else if $index == 0 {
          @warn "List index 0 must be a non-zero integer for `replace-nth`.";
        }

        @else if abs($index) > length($list) {
          @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
        }

        @else {
          $rslt: ();
          $index: if($index < 0, length($list) + $index + 1, $index);

          @for $i from 1 through length($list) {
            @if $i == $index {
              $rslt: append($rslt, $value);
            }

            @else {
              $rslt: append($rslt, nth($list, $i));
            }
          }
        }

        @return $rslt;
      }

      //// 19 //////////// Purges false from a list.
      @function purge($list) {
        $rslt: ();

        @each $item in $list {
          @if $item != null
          and $item != false
          and $item != "" {
            $rslt: append($rslt, $item);
          }
        }

        @return $rslt;
      }

      //// 20 //////////// Checks for custom overrides
      @function chk-override($lock, $key: null, $metal: null, $type: "keys") {
        $rslt: ();
        $replacement: null;
        $metal: if($metal != null, $metal, "nope");
        $mold-verify: null;

          @each $groove, $pin in $lock {
            $lefthand: if(str-index($groove, unquote($key)), true, false);
            @if $lefthand == true {
              $mold: map-tostring(to-list($pin, $type), ' ');
              $mold-verify: if($mold != null, $mold, "nope");
              @if $metal == important {
                $replacement: if(str-index($mold-verify, $metal), true, false);
                $rslt: append($rslt, $replacement);
              }
              @else if $metal == breakpoint {
                @each $breakpoint, $breakpointvalue in $breakpoints {
                  $replacement: if(str-index($mold-verify, $breakpoint), true, false);
                  $rslt: append($rslt, $replacement);
                }
              }
            }
          $rslt: purge($rslt);
        }
        @if $rslt == () {
          @return $rslt;
        }
        @else if $rslt != () {
          @return map-tostring($rslt);
        }
      }

      //// 21 //////////// Removes all stated values from a list
      @function remove($list, $value, $recursive: false) {
        $result: ();

        @for $i from 1 through length($list) {
          @if type-of(nth($list, $i)) == list and $recursive {
            $result: append($result, remove(nth($list, $i), $value, $recursive));
          }

          @else if nth($list, $i) != $value {
            $result: append($result, nth($list, $i));
          }
        }

        @return $result;
      }

//// --- END FUNCTIONS --- ////////////////////////

//// --- MIXINS --- ////////////////////////////


  //// 1 //////////// Makes connections with auto/custo apps
  @mixin lines($root-cnctr, $root-type, $cnctr, $type, $breakpoint, $EpicAct, $importantremoval: normal) {
    $root-cnctr: to-list($root-cnctr, $root-type);
    $cnctr: if(type-of($cnctr) == string, str-to-list(unquote($cnctr), ' '), if(type-of($cnctr) == list, if($cnctr != (), to-list($cnctr, $type), ""), $cnctr));
    $cnctr-list: ();

    @if $importantremoval == normal {
      $cnctr-list: remove($cnctr, "important", true);
    }
    @else if $importantremoval == full-important {
      $cnctr-list: remove($cnctr, "!important", true);
      $cnctr-list: remove($cnctr, "important", true);
    }

    $cnctr-length: length($cnctr-list);
    $splitter: if(nth($cnctr-list, 1) == auto, built-in, if(nth($cnctr-list, 1) == custo, add-on, neither));
    $cnctr-str: map-tostring($cnctr-list, ' ');

    @if $cnctr-length <= 1 {
      #{$root-cnctr}: #{$cnctr-str};
    }
    @else if $cnctr-length > 1 {
      @if $splitter == built-in {
        $cnctr-list: remove($cnctr-list, auto);
        $cnctr-str: map-tostring($cnctr-list, ' ');
      }
      @else if $splitter == add-on {
        $cnctr-list: remove($cnctr-list, custo);
        $cnctr-str: map-tostring($cnctr-list, ' ');
      }
      @else {
        #{$root-cnctr}: #{$cnctr-str};
      }
    }
  }

  //// 2 //////////// Switches on and off for passible properties
  @mixin switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $startkey, $startvalue, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname) {
    $subhands: map-tostring(to-list($startkey, "keys"), ' ');
      $subhands-verify: if($subhands != null, $subhands, "nope");
      $sublefty: if(map-check($extensions, $subhands-verify), true, false);
      $subrighty: if(str-index($subhands-verify, 'extend'), true, false);

    // Checks and Balances Breakpoints and Base Keys
    $mold: map-tostring(to-list($startvalue, "keys"), ' ');
    $mold-verify: if($mold != null, $mold, "nope");

      @each $breakpoint, $breakpointvalue in $breakpoints {
        $replacement: if(str-index($mold-verify, $breakpoint), true, false);
        $rslt: append($rslt, $replacement);
      }
      $rslt: if(remove-duplicates(purge($rslt)) == (), false, true); // Breakpoints

      $importantcheck: if(str-index($mold-verify, ' important'), true, false);
      $rslt-imprtnt: if(remove-duplicates(purge($importantcheck)) == (), false, true); // Important

    $override-brkname: if($override-brkname != null, $override-brkname, "nope");
      $breakpointcheck2: if(str-index($mold-verify, $override-brkname), true, false);
      $rslt-brkpnt2: if(remove-duplicates(purge($breakpointcheck2)) == (), false, true);

      @if $redswitch == true {
        $rslt-base-solve: true;
        $rslt-imprtnt-solve: true;
        $rslt-brkpnt-solve: false;
      }
      @else if $blueswitch == true {
        $rslt-base-solve: true;
        $rslt-imprtnt-solve: true;
        $rslt-brkpnt-solve: true;
      }


    @if $sublefty != true and $boardroute == new {
      $propval: map-tostring(to-list($startvalue, "keys"), ' ');

      // First Level properties (no breakpoints, base or anything else but solid first level css)
      @if $redswitch == false and $blueswitch == false {
        @if $EpicAct == normal or $EpicAct == important {
          @if $rslt == false and $rslt-imprtnt == $rslt-imprtnt-solve {
            @include lines($startkey, "keys", $startvalue, "keys", $breakpoint, $EpicAct);
          }
        }
      }
      @else if $redswitch == true and $blueswitch == false {
        @if $rslt == $rslt-brkpnt-solve {
          @include lines($startkey, "keys", $startvalue, "keys", $breakpoint, $EpicAct);
        }
      }
      @else if $blueswitch == true and $redswitch == false and $breakpoint == $override-brkname {
        @if $rslt == false and $rslt-imprtnt == $rslt-imprtnt-solve {
          @include lines($startkey, "keys", $startvalue, "keys", $breakpoint, $EpicAct, full-important);
        }
      }

      // Second Level properties (can be breakpoints, base, etc.)
      @each $key, $value in $startvalue {
        $mold: map-tostring($key);
          $mold-verify: if($mold != null, $mold, "nope");
          $basecheck: if(str-index($mold-verify, base), true, false);
          $breakpointcheck: if($breakpoint != null, if(str-index($mold-verify, $breakpoint), true, false), "()");
          $breakpointcheck3: if(str-index($mold-verify, $override-brkname), true, false);
        $submold: map-tostring($value, ' ');
          $submold-verify: if($submold != null, $submold, "nope");
          $importantcheck: if(str-index($submold-verify, ' important'), true, false);

        $rslt-base: if(remove-duplicates(purge($basecheck)) == (), false, true);
        $rslt-imprtnt: if(remove-duplicates(purge($importantcheck)) == (), false, true);
        $rslt-brkpnt: if($rslt-brkpnt-solve != false, if(remove-duplicates(purge($breakpointcheck)) == (), false, true), false);
        $rslt-brkpnt3: if(remove-duplicates(purge($breakpointcheck3)) == (), false, true);

        $propval: map-tostring(to-list($value, "values"), ' ');

        @if $redswitch == false and $blueswitch == false {
          @if $rslt-base == $rslt-base-solve and $rslt-imprtnt == $rslt-imprtnt-solve and $rslt-brkpnt == $rslt-brkpnt-solve {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
          @else if $rslt-imprtnt == true and $rslt-brkpnt == true {
            @warn "Sorry, you can't have it both ways. If you'd like to make this important within a breakpoint just add an '!'";
          }
        }
        @else if $redswitch == true and $blueswitch == false {
          @if $rslt-base == $rslt-base-solve and $rslt-brkpnt == $rslt-brkpnt-solve {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
        }
        @else if $blueswitch == true and $redswitch == false and $breakpoint == $override-brkname {
          @if $rslt-brkpnt2 == true and $rslt-brkpnt3 == true {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
          @else if $rslt-brkpnt2 == false and $rslt-base == true {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
        }
      }
    }
    @else if $subrighty == true and $boardroute == extend {

      @each $key, $value in $startvalue {
        $mold: map-tostring(to-list($key, "keys"), ' ');
        $mold-verify: if($mold != null, $mold, "nope");
        $breakpointslist: to-list($breakpoints, 'keys'); // List of current breakpoints

        $brkpntcheck: null;
        $rslttotal: null;
        $brkpntgo: null;

        @each $breakpointtie, $breakpointvaluetie in $breakpoints {
            $brkpntcheck: if(str-index($key, $breakpointtie), true, false);
            @if $brkpntcheck == true {
              $rslttotal: $breakpointtie;
            }
            $brkpntgo: append($brkpntgo, $brkpntcheck);
        }
        $rslt-brkpnt: if(remove-duplicates(purge($brkpntgo)) == (), false, true);

        @if $EpicAct == breakpoint {
          @if $rslt-brkpnt == true and $rslttotal == $breakpoint {
            @extend %#{$key};
          }
        }
        @else if $EpicAct == normal or $EpicAct == important {
          @if $rslt-brkpnt == false {
            @extend %#{$key};
          }
        }
      }
    }
  }

  //// 2 //////////// Routes passible criteria to their switches
  @mixin router($property, $propertyvalue, $value, $key, $breakpoint, $EpicAct, $boardroute, $breakpoint-override: false, $important-override: false, $override-brkname: null) {
    $rslt-imprtnt-solve: null !default;
    $rslt-base-solve: null !default;
    $rslt-brkpnt-solve: null !default;
    $redswitch: false !default;
    $blueswitch: false !default;

    @if $EpicAct == normal {
      $rslt-imprtnt-solve: false !default;
      $rslt-base-solve: true !default;
      $rslt-brkpnt-solve: false !default;

      @if $important-override == true {
        $redswitch: false;
        $blueswitch: false;
      }
      @else if $breakpoint-override == true {
        $blueswitch: false;
        $redswitch: false;
      }
    }
    @else if $EpicAct == important {
      $rslt-imprtnt-solve: true !default;
      $rslt-base-solve: true !default;
      $rslt-brkpnt-solve: false !default;

      @if $important-override == true {
        $redswitch: true;
        $blueswitch: false;
      }
      @else if $breakpoint-override == true {
        $blueswitch: false;
        $redswitch: false;
      }
    }
    @else if $EpicAct == breakpoint {
      $rslt-imprtnt-solve: false !default;
      $rslt-base-solve: false !default;
      $rslt-brkpnt-solve: true !default;

      @if $breakpoint-override == true {
        $blueswitch: true;
        $redswitch: false;
      }
      @else if $important-override == true {
        $redswitch: false;
        $blueswitch: false;
      }
    }

    // Removing or allowing extensions, pseudos and subclasses
      $hands: map-tostring(to-list($property, "keys"), ' ');
        $lefty: if(map-check($pseudos, $hands), true, false);
        $righty: if(str-index($hands, "_"), true, false);
        $uppy: if(str-index($hands, "-k"), true, false);
        $downy: if(str-index($hands, "extend"), true, false);

      // Removing or allowing breakpoints
      $feet: map-tostring(to-list($propertyvalue, "keys"), ' ');
        $feet-verify: if($feet != null, $feet, "nope");
        $leftfoot: if(str-index($feet-verify, "override"), true, false);
        $rightfoot: if(str-index($feet-verify, "extend"), true, false);

      $rslt: (); // Breakpoint
      $rslt-imprtnt: (); // Important
      $rslt-base: (); // Base

    @if $boardroute == new {

      // For CSS Properties
      @if $lefty != true and $righty != true and $uppy != true {
        @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $property, $propertyvalue, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
      }

      // For Pseudos
      @else if $lefty == true {
        &#{unquote(":")}#{$property} {
          @each $subprop, $subpropval in $propertyvalue {
            @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
          }
        }
      }

      // For Sub-classes
      @else if $righty == true {
        &#{if($property != null, unquote("-"), '') + if(str-index($property, '_'), str-replace($property, _, ''), '')} {
          @each $subprop, $subpropval in $propertyvalue {
            @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
          }
        }
      }

      // For Kin
      @else if $uppy == true {
        $aliasnames: ();
        $mold-verify: null;
        $rslt-link: null;
        $mold: null;

        @each $subprop, $subpropval in $propertyvalue {
          $mold: map-tostring($subprop, '', true);
          $mold-verify: if($mold != null, $mold, "nope");
          $linkcheck: if(str-index($mold-verify, 'kname'), true, false);
          $rslt-link: if(remove-duplicates(purge($linkcheck)) == (), false, true);

          @if $rslt-link == true {
            @for $i from 1 through length($subpropval) {
              $propval: map-tostring(nth($subpropval, $i), ' ');
              $aliastest1: null;
              $aliastest2: null;

              @if if(str-index($propval, '+'), true, true) {
                $aliastest1: if(str-index($propval, '+'), str-replace($propval, '+', '%'), $propval);
                @if if(str-index($aliastest1, '_'), true, true) {
                  $aliastest2: if(str-index($aliastest1, '_'), str-replace($aliastest1, '_', '.'), $aliastest1);
                    @if if(str-index($aliastest2, '#'), true, true) {
                      $aliasnames: append($aliasnames, $aliastest2, comma);
                    }
                  }
                @else {
                  $aliasnames: append($aliasnames, $aliastest1, comma);
                }
              }
              @else {
                $aliasnames: append($aliasnames, $propval, comma);
              }
            }
          }
        }
        $aliasname: if($aliasnames != (), $aliasnames, unquote(''));

        #{$aliasname} {

          @each $subprop, $subpropval in $propertyvalue {
            $subhands: map-tostring($subprop, ' ');
            $subrighty: if(map-check($pseudos, $subhands), true, false);
            $sublefty: if(str-index($hands, "_"), true, false);
            $linkcheck: if(str-index($subprop, 'kname'), true, false);

            @if $sublefty == false and $subrighty == false and $linkcheck == false {
              @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
            }
            @else if $subrighty == true {
              &#{unquote(":")}#{$subprop} {
                  @each $subsubprop, $subsubpropval in $subpropval {
                    @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subsubprop, $subsubpropval, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
                  }
              }
            }
            @else if $sublefty == true {
              @warn "Creating subclasses within kin isnt allowed.";
            }
          }
        }
      }

    }

    @else if $boardroute == extend {
      @if $downy == true {
        @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $property, $propertyvalue, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
      }
    }

  }



//// ▾▾▾ NETHERMOST FUNDAMENTAL IMPORTS ▾▾▾ ////
@import 'plugins/Modular-Scale/tc+modular-scale.scss';
