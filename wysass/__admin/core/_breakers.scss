@mixin naming($property, $filter) {

  $property: str-replace($property, "\\", "");
  //font-family: $property;
  // $sass-child: "\>"; // Key for Child
  @if $filter == child-name {

    $alias-prime: null;

    // Direct Child ".classname > .classname"
    $alias-prime-a: if(str-index(to-string($property), ">>>"), true, false);
    // Regular Child ".classname .classname"
    $alias-prime-b: if(str-index(to-string($property), ">>"), true, false);

    // Same Level Child ".classname.classname"
    $alias-prime-c: if(str-index(to-string($property), ">"), true, false);

    // Removes child name
    $alias-prehand: str-replace(str-replace(to-string($property), ' ', ''), $sass-child, '');

    // If the direct child command is used
    @if $alias-prime-a == true {
      // Checks for HTML Elements
      $alias-prime-h: if(chk-list($html-elements, $alias-prehand), true, false);
      $alias-prime-i: if(str-index($alias-prehand, "#"), true, false);
      @if $alias-prime-h == true or $alias-prime-i == true {$alias-prime: " > " + $alias-prehand;}
      @else {$alias-prime: " > ." + $alias-prehand;}
    }
    // If the regular child command is used
    @else if $alias-prime-b == true {
      // Checks for HTML Elements
      $alias-prime-h: if(chk-list($html-elements, $alias-prehand), true, false);
      $alias-prime-i: if(str-index($alias-prehand, "#"), true, false);
      @if $alias-prime-h == true or $alias-prime-i == true {$alias-prime: " " + $alias-prehand;}
      @else {$alias-prime: " ." + $alias-prehand;}
    }
    // If the regular child command is used
    @else if $alias-prime-c == true {
      // Checks for HTML Elements
      $alias-prime-h: if(chk-list($html-elements, $alias-prehand), true, false);
      $alias-prime-i: if(str-index($alias-prehand, "#"), true, false);
      @if $alias-prime-h == true {@error "Sorry, html elements cannot be direct children.";}
      @else if $alias-prime-i == true {$alias-prime: "" + $alias-prehand;}
      @else {$alias-prime: "." + $alias-prehand;}
    }

    &#{$alias-prime} {@content;}
  }

  @else if $filter == pseudo-name {
    &#{unquote(_($pseudos, $property))} {@content;}
  }

  // $sass-namespace: "\:"; // Key for Namespace classes
  @else if $filter == namespace-name {

    &#{unquote("\\:") + str-replace($property, $sass-namespace, '')} {@content;}
  }

  //$sass-subclass: "\-"; // Key for Sub-Classes
  @else if $filter == subclass-name {

    $name: null;
    // Subclass double hyphen "originalclass--classname"
    $alias-prime-a: if(str-index(to-string($property), $sass-subclass + "\-") == 1, true, false);
    // Subclass hyphen "originalclass-classname"
    $alias-prime-b: if(str-index(to-string($property), $sass-subclass) == 1, true, false);

    // If the subclass double hyphen is used
    @if $alias-prime-a == true {
      $name: "--" + str-slice($property, 3, str-length($property));
    }
    // If the subclass hyphen is used
    @else if $alias-prime-b == true {
      $name: "-" + str-slice($property, 2, str-length($property));
    }

    &#{$name} {@content;}
  }

  //$sass-underclass: "\_"; // Key for Under-Classes
  @else if $filter == underclass-name {

    $name: null;
    // Subclass double hyphen "originalclass--classname"
    $alias-prime-a: if(str-index(to-string($property), $sass-underclass + "\_") == 1, true, false);
    // Subclass hyphen "originalclass-classname"
    $alias-prime-b: if(str-index(to-string($property), $sass-underclass) == 1, true, false);

    // If the underclass double hyphen is used
    @if $alias-prime-a == true {
      $name: "__" + str-slice($property, 3, str-length($property));
    }
    // If the underclass hyphen is used
    @else if $alias-prime-b == true {
      $name: "_" + str-slice($property, 2, str-length($property));
    }

    $parent: &;
    $parent-key: to-string($parent);
    $parent-check: if(str-index($parent-key, "."), true, if(str-index($parent-key, "#"), true, false));
    @if $parent-check == false {
      @at-root #{"." + $parent + $name} {@content;}
    }
    @else {
      &#{$name} {@content;}
    }

  }

  // $sass-preceder: "\~"; // Key for Preceding selector
  @else if $filter == preceder-name {
    $name: null;
    $property-clean: str-replace($property, $sass-preceder, "");
    $alias-prime-h: if(chk-list($html-elements, $property-clean), true, false);
    $alias-prime-i: if(str-index($property-clean, "#"), true, false);
    @if $alias-prime-h == true or $alias-prime-i == true {$name: $property-clean;}
    @else {$name: str-replace($property, $sass-preceder, ".");}

    &#{"~ " + $name} {@content;}
  }

  // $sass-comma: "\,"; // Key for comma separated selector
  @else if $filter == comma-name {
    $name: null;
    $property-clean: str-replace($property, $sass-comma, "");
    $alias-prime-h: if(chk-list($html-elements, $property-clean), true, false);
    $alias-prime-i: if(str-index($property-clean, "#"), true, false);
    @if $alias-prime-h == true or $alias-prime-i == true {$name: $property-clean;}
    @else {$name: str-replace($property, $sass-comma, ".");}

    $parent: &;
    @at-root #{$parent + ", " + $name} {@content;}
  }

  // $sass-immediate: "\+"; // Key for immediate selector
  @else if $filter == immediate-name {
    $name: null;
    $property-clean: str-replace($property, $sass-immediate, "");
    $alias-prime-h: if(chk-list($html-elements, $property-clean), true, false);
    $alias-prime-i: if(str-index($property-clean, "#"), true, false);
    @if $alias-prime-h == true or $alias-prime-i == true {$name: $property-clean;}
    @else {$name: str-replace($property, $sass-immediate, ".");}

    &#{"+" + $name} {@content;}
  }

  // $sass-rename: "\\"; // Key for Name Extensions
  @else if $filter == rename {
      $name-pre: str-slice($property, 2, str-length($property));
      $name: str-replace($name-pre, "\"", "");

    &#{unquote($name)} {@content;}
  }
}

@mixin brker($property, $filter) {
  $property: to-string($property);
  $key: str-slice($property, 1, 2);
  $name-check: if(str-index($key, "\\"), true, false);

  @if $filter == property and $name-check == false {
    $keyclean: key-cleanup($property);
    @if $keyclean != true {@content;}
  }
  @else if $filter == name and $name-check == false {
    @if if(map-check($pseudos, $property), true, false) {@include naming($property, pseudo-name) {@content;}}
  }
  @else if $filter == name and $name-check == true {
    @if if(str-index($key, $sass-namespace), true, false) {@include naming($property, namespace-name) {@content;}}
    @else if if(str-index($key, $sass-child), true, false) {@include naming($property, child-name) {@content;}}
    @else if if(str-index($key, $sass-subclass), true, false) {@include naming($property, subclass-name) {@content;}}
    @else if if(str-index($key, $sass-underclass), true, false) {@include naming($property, underclass-name) {@content;}}
    @else if if(str-index($key, $sass-immediate), true, false) {@include naming($property, immediate-name) {@content;}}
    @else if if(str-index($key, $sass-comma), true, false) {@include naming($property, comma-name) {@content;}}
    @else if if(str-index($key, $sass-preceder), true, false) {@include naming($property, preceder-name) {@content;}}
    @else if if(str-index($key, $sass-rename), true, false) {@include naming($property, rename) {@content;}}
  }
}

@mixin filterpoint($filter, $EpicAct, $redpill, $bluepill, $purplepill, $override-brkname, $allbreakpoint-override, $breakpoint) {
  @if $EpicAct == normal and $filter == regular {
    $important-removal: normal;
    @if $redpill == false and $bluepill == false and $purplepill == true {
      @content;
    }
  }
  @else if $EpicAct == breakpoint and $filter == full {
    @if $redpill == false and $bluepill == true and $purplepill == false {
      @if $allbreakpoint-override == true {
        @content;
      }
      @else if $override-brkname == $breakpoint {
        @content;
      }
    }
  }
  @else if $EpicAct == important and $filter == full {
    $important-removal: normal;
    @if $redpill == true and $bluepill == false and $purplepill == false {
      @content;
    }
  }
}

@mixin splitter($string, $list, $filter) {
  $verb-prep: to-string(nth($list, 1));
  $verb: if(str-index($verb-prep, ","), str-replace($verb-prep, ","), $verb-prep);

  $splitter:
    /* Value Commands */
    if($verb == $sass-autoval, auto-val,
    if($verb == $sass-custoval, custo-val,

    /* Property Commands */
    if(chk-list($ATG, quote($string)), auto-type,

    /* Complete Autocode Commands */
    if(str-index($string, $sass-autoprop), auto-prop,
    if(str-index($string, $sass-custoprop), custo-prop,
    regular)))));

  @if $splitter == $filter {
    @content;
  }
}

// Adds Breakpoints Names to Class names
@mixin namebrker($EpicAct, $namebreak-feature, $breakpoint, $type: $Global-NameBreak-Separator) {
  @if $Enable-NameBreak == yes and $EpicAct == breakpoint and $namebreak-feature == true {
    @if $type == direct-child {
      &#{"." + $breakpoint} {@content;}}
    @else if $type == child {
      &#{" ." + $breakpoint} {@content;}}
    @else if $type == namespace {
      &#{"\\:" + $breakpoint} {@content;}}
    @else if $type == default {
      &#{"--" + $breakpoint} {@content;}}
    @else if $type == default-under {
      &#{"__" + $breakpoint} {@content;}}
  }
  @else {@content;}
}
