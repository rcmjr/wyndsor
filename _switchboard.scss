//// •••••• FUNDAMENTAL IMPORTS •••••• ////
@import 'Tools/toolbox.scss';
$red: red;
// 1. Base Scenario = width: (20px) = manual values associated with that specific property that apply always, and do not change via breakpoint
// 2. Autocode Scenario
//    a. Pure Auto = width: (auto, 20px) = you enter a value and it runs through a mixin that ouputs values for all the breakpoints based on global values
//    b. Custom Auto = width: (custo, 20px) = you enter a value and it runs through a mixin that outputs values for all the breakpoints based on your own custom values
// 3. Technical Scenario
//    a. Manual Tech = width: (tablet: (30px), phablet: (40px), phone: (60px)) = you enter manual values for every breakpoint you want to effect
//    b. Comprehensive Tech = width: (base:(20px), tablet: (30px), etc.) = you enter in a base value which is overridden by the breakpoints that follow.
//    c. Infinite Tech = width: (base: (20px), tablet: (auto, 44px), phablet: (custo, 55px), etc.) = you enter auto, custo or manual values in any breakpoint
// 4. Sub-Classes/States/Animations/Transitions
//    a. Class variations = header1: (..., vars: (blue: (width: 20px)) > .header1-blue class = you create class variation using an underscore before it's name.
//    b. Sub-Classes = header2: (..., _red: (width: 20px)) > .header2, .red class = you create
//    c. States = header3: (..., hover, active, etc.) = create pseudo elemental states.
// 5. Extensions = extend: (layout, grid, homepage) = you call an existing map class so that it's values get attributed to this specific class.

// Three CSS Groups:
//    a. Regular (which can be overridden by breakpoints or classes that come after it)
//    b. Breakpoint Based (All breakpoints and their classes go here)
//    c. Important (which come after all other CSS and stays at the bottom of the stylesheet)

// Custom Actions:
//    a. Have Wyndsor create an id, rather than a class
//    b. Add an !important to the end of a property
//    c. Add class or id to a group based on an existing style


//// --- SECTION --- ////////////////////////////
  //// 1 //////////// Code/Sass Snippet Name
    //// a //////////// Snippet Sub
//// --- END SECTION --- ////////////////////////

@mixin switchboard($EpicList, $EpicMap, $EpicAct, $EpicList2, $EpicMap2, $breakpoint, $extendswitch) {

  //// ✩ //////////// Root Variables
  $alphalist: $EpicList;
  $alphamap: $EpicMap;
  $betalist: $EpicList2;
  $betamap: $EpicMap2;

    //// --- CLASS and SUB-CLASS GENERATOR --- ////////////////////////////
    @each $key, $value in $alphalist {

      //// 1 //////////// Determines legit or placeholder class, or id.
      $selectortype: null;

        @if $extendswitch != extender {
          $selectortype: if(if(str-index($value, '#'), true, false), "#", ".");
        }
        @else if $extendswitch == extender {
          $selectortype: if(if(str-index($value, '#'), true, false), "%", "%");
        }

      //// 2 //////////// Creates the classes, ids, subclasses and pseudos
      #{unquote($selectortype)}#{str-replace($value, '#', '')}#{if($extendswitch == extender and $EpicAct == breakpoint, unquote('-' + $breakpoint), '')} {

        //// --- CLASS GENERATOR --- ////////////////////////////
        @each $childproperty, $propertyvalue in _($alphamap, $key) {

          //// ✩ //////////// Variable Redirects
          $cssproperty: $childproperty;
          $cssvalue: $propertyvalue;

          //// ✩ //////////// Important Variables
          $classexist: chk-existence($cssproperty, _);
          $extendexist: chk-existence($cssproperty, extend);
          $cssvalueslist: to-list($cssvalue, "values");
          $propvalstring: map-tostring($cssvalue, ' ');
          $breakpointexist: chk-existence($propvalstring, $breakpoint);
          $breakpointpresent: if(map-check($breakpoints, map-tostring(to-list($cssvalue, "keys"), '')) or map-check($media-expressions, map-tostring(to-list($cssvalue, "keys"), '')), true, false);
          $importantpresent: chk-existence($propvalstring, important);

          //// > //////////// Will not allow Pseudos, Sub-Casses, or Extensions
          @if map-check($psuedos, $cssproperty) == false and $classexist == false and $extendexist == false {

            //// 1 //////////// If an important property
            @if $EpicAct == important and $breakpointpresent == false and $importantpresent == true {
              #{$cssproperty}: #{if(chk-existence($propvalstring, !important), str-replace($propvalstring, ' !important', ' !important'), if(chk-existence($propvalstring, important), str-replace($propvalstring, ' important', ''), ''))};
            }

            //// 2 //////////// If a property with breakpoints
            @else if $EpicAct == breakpoint and $breakpointpresent == true {
              #{$cssproperty}:#{$cssvalueslist};
            }

            //// 3 //////////// If a normal property
            @else if $EpicAct == normal {
              @if $importantpresent == true {
                // Fires Blank Property
              }
              @else if $breakpointpresent == true {
                // Fires Blank Property
              }
              @else {
                #{$cssproperty}: #{$cssvalue};
              }
            }

          }
          //// > //////////// End of IF
        }

        //// --- SUB-CLASS and PSEUDO GENERATOR --- ////////////////////////////
        @each $childproperty, $propertyvalue in _($alphamap, $key) {

          //// ✩ //////////// Important Variables
          $subclassexist: chk-existence($childproperty, _);
          $extendexist: chk-existence($childproperty, extend);

          //// > //////////// Will not allow Pseudos, Sub-Casses, or Extensions
          @if $extendexist == false and map-check($psuedos, $childproperty) == true or $subclassexist == true {

            //// ✩ //////////// Determines if Sub-Class or Pseudo
            $connector: null;

              //// 1 //////////// Allows or Disallows the Pseudo Generator to Run
              @if map-check($psuedos, $childproperty) {
                $connector: ":";
              }
              //// 2 //////////// Allows or Disallows the Sub-Class Generator to Run
              @else if $subclassexist == true {
                $connector: "-";
              }

            //// a //////////// Creates Sub-Class or Pseudo
            &#{unquote($connector)}#{str-replace($childproperty, '_', '')} {

              @each $subproperty, $subpropertyvalue in $propertyvalue {


              }
            }

          }
        }
      }
    }


      //// 3 //////////// Creates the classes, ids, subclasses and pseudos
      @if $extendswitch == extender {

        @each $key, $value in $betalist {

          $selectortype: if(if(str-index($value, '#'), true, false), "#", ".");

          #{unquote($selectortype)}#{str-replace($value, '#', '')} {

            //// > //////////// Entering the Alpha Map
            @each $childproperty, $propertyvalue in _($betamap, $key) {

              //// ✩ //////////// Important Variables
              $extendexist: chk-existence($childproperty, extend);
              $propvalstring: map-tostring($propertyvalue, ' ');
              $breakpointexist: chk-existence($propvalstring, unquote($breakpoint));
              $baseexist: chk-existence($propvalstring, base);
              $breakpointpresent: if(map-check($breakpoints, map-tostring(to-list($propertyvalue, "keys"), '')) or map-check($media-expressions, map-tostring(to-list($propertyvalue, "keys"), '')), true, false);


              //// > //////////// Only if this is an Extend
              @if $extendexist == true {

                //// ✩ //////////// Important Variables
                $maporstring: if($breakpointpresent == true or $baseexist == true, map, string);

                //// 1 //////////// Processes for Breakpoints only
                @if $EpicAct == breakpoint and $breakpointpresent == true {

                  @each $subproperty, $subpropertyvalue in $propertyvalue {


                    //// ✩ //////////// Variable Redirects
                    $keyname: $subproperty;
                    $valuename: $subpropertyvalue;

                    @if $keyname != base {
                      //// ✩ //////////// Important Variables
                      $propvalstring: map-tostring($keyname, ' ');
                      $breakpointexist: chk-existence($keyname, $breakpoint);
                      $existencevalues: list-checkmake($valuename, $alphalist);
                      $existencetest: if($existencevalues, true, false);



                      //// a //////////// Processes Map Extends
                      @if $maporstring == map {

                        @for $i from 1 through length($existencevalues) {
                            // font-family: chk-existence($alphalist, nth($existencetest, $i));

                          @if $existencetest == true {

                            @extend %#{nth($existencevalues, $i)}#{if($extendswitch == extender, unquote('-' + $breakpoint), '')};

                          }
                        }
                      }

                      //// b //////////// Processes String Extends
                      @else if $maporstring == string {

                      }
                    }
                  }
                }

                //// 2 //////////// Processes for Breakpoints only
                @else if $EpicAct == normal and $breakpointpresent == false {

                  //// ✩ //////////// Variable Redirects
                  $keyname: $childproperty;
                  $valuename: $propertyvalue;

                  //// ✩ //////////// Important Variables
                  $propvalstring: map-tostring($keyname, ' ');
                  $existencevalues: list-checkmake($valuename, $alphalist);
                  $existencetest: if($existencevalues, true, false);
                  $breakpointpresent: if(map-check($breakpoints, map-tostring(to-list($valuename, "keys"), '')) or map-check($media-expressions, map-tostring(to-list($valuename, "keys"), '')), true, false);

                  //// a //////////// Processes Map Extends
                  @if $maporstring == map {

                    @each $subproperty, $subpropertyvalue in $valuename {

                      //// ✩ //////////// Important Variables
                      $existencevalues: list-checkmake($subpropertyvalue, $alphalist);
                      $existencetest: if($existencevalues, true, false);

                      @for $i from 1 through length($existencevalues) {
                          // font-family: chk-existence($alphalist, nth($existencetest, $i));

                        @if $subproperty == base {

                          @extend %#{nth($existencevalues, $i)};

                        }
                        @else {
                          // Empty Catch-All
                        }
                      }
                    }
                  }
                  //// b //////////// Processes String Extends
                  @else if $maporstring == string and $existencetest == true {
                    //// 3 //////////// If a normal property
                  //  @extend %#{$valuename};
                  }

                }

                @else {
                  // Empty Catch-All
                }
              }
            }
          }
        }
      }
    }


  //// --- END CLASS GENERATOR --- ////////////////////////



$TestCombo-List: (
  1: Phase2-Class,
  2: #Phase2-Class2
);

$TestCombo-Deets: (
  1: (
    grid: (grid),
    width: 555px,
    height: (50px, important),
    extend: (
      tablet: (Style1, Style2)
    ),
    color: (
      tablet: $red !important),
    background: (
      tablet: grey
    ),
    _blue: (
      width: (20px))
  ),
  2: (
    grid: (sub-grid !important),
    height:
    (10000px
      20px
      40px),
    extend: (
      base: (Style1, Style2, Style3)
      ),
    color: (
      tablet: blue !important),
    background: (
      tablet: black 20px 5px solid),
    _red: (
      width: (4000000px))
  ));

  $TestStyle-List: (
    1: Style1,
    2: Style2
  );

  $TestStyle-Map: (
    1: (
      width: 999999px,
      grid-template-rows: 25% 100px auto,
      font-style: solid,
      grid-column: "<start-line> / <end-line> | <start-line> / span <value>",
      grid-row: "third-line / 4",
      color: (
        tablet: (green)
      ),
    ),
    2: (
      height: 4444px,
      background: red,
      width: (
        tablet: 20px
      )
    )
  );

  @include switchboard($EpicList: $TestCombo-List, $EpicMap: $TestCombo-Deets, $EpicAct: normal, $EpicList2: null, $EpicMap2: null, $breakpoint: null, $extendswitch: null);
  @include switchboard($EpicList: $TestStyle-List, $EpicMap: $TestStyle-Map, $EpicAct: normal, $EpicList2: $TestCombo-List, $EpicMap2: $TestCombo-Deets, $breakpoint: null, $extendswitch: extender);
  @include brkpoint('>=tablet') {
  @include switchboard($EpicList: $TestCombo-List, $EpicMap: $TestCombo-Deets, $EpicAct: breakpoint, $EpicList2: null, $EpicMap2: null, $breakpoint: 'tablet', $extendswitch: null);
  @include switchboard($EpicList: $TestStyle-List, $EpicMap: $TestStyle-Map, $EpicAct: breakpoint, $EpicList2: $TestCombo-List, $EpicMap2: $TestCombo-Deets, $breakpoint: 'tablet', $extendswitch: extender);}
  @include switchboard($EpicList: $TestCombo-List, $EpicMap: $TestCombo-Deets, $EpicAct: important, $EpicList2: null, $EpicMap2: null, $breakpoint: null, $extendswitch: null);
