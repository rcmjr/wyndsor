//// •••••• FUNDAMENTAL IMPORTS •••••• ////
@import 'Tools/toolbox.scss';
$red: red;
// 1. Base Scenario = width: (20px) = manual values associated with that specific property that apply always, and do not change via breakpoint
// 2. Autocode Scenario
//    a. Pure Auto = width: (auto, 20px) = you enter a value and it runs through a mixin that ouputs values for all the breakpoints based on global values
//    b. Custom Auto = width: (custo, 20px) = you enter a value and it runs through a mixin that outputs values for all the breakpoints based on your own custom values
// 3. Technical Scenario
//    a. Manual Tech = width: (tablet: (30px), phablet: (40px), phone: (60px)) = you enter manual values for every breakpoint you want to effect
//    b. Comprehensive Tech = width: (base:(20px), tablet: (30px), etc.) = you enter in a base value which is overridden by the breakpoints that follow.
//    c. Infinite Tech = width: (base: (20px), tablet: (auto, 44px), phablet: (custo, 55px), etc.) = you enter auto, custo or manual values in any breakpoint
// 4. Sub-Classes/States/Animations/Transitions
//    a. Class variations = header1: (..., vars: (blue: (width: 20px)) > .header1-blue class = you create class variation using an underscore before it's name.
//    b. Sub-Classes = header2: (..., _red: (width: 20px)) > .header2, .red class = you create
//    c. States = header3: (..., hover, active, etc.) = create pseudo elemental states.
// 5. Extensions = extend: (layout, grid, homepage) = you call an existing map class so that it's values get attributed to this specific class.

// Three CSS Groups:
//    a. Regular (which can be overridden by breakpoints or classes that come after it)
//    b. Breakpoint Based (All breakpoints and their classes go here)
//    c. Important (which come after all other CSS and stays at the bottom of the stylesheet)

// Custom Actions:
//    a. Have Wyndsor create an id, rather than a class
//    b. Add an !important to the end of a property
//    c. Add class or id to a group based on an existing style


//// --- SECTION --- ////////////////////////////
  //// 1 //////////// Code/Sass Snippet Name
    //// a //////////// Snippet Sub
//// --- END SECTION --- ////////////////////////

@mixin switchboard($AlphaMap, $EpicAct, $BetaMap, $breakpoint, $extendswitch) {

  //// ✩ //////////// Root Variables
  $breakpointslist: to-list($breakpoints, 'keys'); // List of current breakpoints

    //// --- CLASS and SUB-CLASS GENERATOR --- ////////////////////////////
    @each $key, $value in $AlphaMap {

      //// 1 //////////// Determines legit or placeholder class, or id.
      $type: null;
      $altnames: ();
      $altname: null;
      $exist-alt: null;

        @if if(str-index($key, '#'), true, false) {
          $type: "#";
        }
        @else if if(str-index($key, '+'), true, false) {
          $type: "%";
        }
        @else {
          $type: ".";
        }

        $altnames-str: null;
        $altnames-list2: null;

        @each $property, $propertyvalue in $value {
          $exist-alt: chk-existence($property, alt);

          @if $exist-alt == true {
            @for $i from 1 through length($propertyvalue) {
              $propval: nth($propertyvalue, $i);

              @if if(str-index($propval, '#'), true, false) {
                $altnames: append($altnames, $propval, comma);
              }
              @else if if(str-index($propval, '+'), true, false) {
                $altnames: append($altnames, if(str-index($propval, '+'), str-replace($propval, '+', '%'), null), comma);
              }
              @else {
                $altnames: append($altnames, #{unquote(".")}#{$propval}, comma);
              }
            }
          }
        }

        $mainname: $type + if(str-index($key, '#'), str-replace($key, '#', ''), if(str-index($key, '+'), str-replace($key, '+', ''), $key));
        $brkname: if($EpicAct == breakpoint, unquote('-' + $breakpoint), '');
        $altname: if($altnames != (), $altnames, unquote(''));

        //// 2 //////////// Creates the classes, ids, subclasses and pseudos
        #{$mainname}#{$brkname}#{if($altname != null, unquote(', '), '')}#{if($altname != null, $altname, '')} {
          $tracker: null;



          @each $property, $propertyvalue in $value {

            $extval: map-tostring(to-list(_($value, if($property == "-t", "-t", "nope")), "keys"), ', ');
            font-family: $extval;
            $cruncher: if(chk-existence($extval, important), 1, 0);
            $tracker: max($cruncher);
            font-stretch: $tracker;

            //// ✩ //////////// Important Variables
            $depthkey: map-depth(_($value, $property));
            $ext: map-tostring(to-list($property, "keys"), ' ');
            $brks: map-tostring(nth(to-list($propertyvalue, "keys"), 1), ', ');
            $extpresent: if(map-check($extensions, $ext) or map-check($pseudos, $ext) or str-index($ext, '_'), true, false);
            $brkpresent: if(map-check($breakpoints, $brks) or map-check($media-expressions, $brks) or map-check($media-sizes, $brks), true, false);



              @if $EpicAct == important and $tracker == 0 {
                @if $extpresent != true {
                  font-family: $property;
                  font-variant: $brkpresent;
                  font-style: $extpresent;

              $propvalstring: null;

              // Single Properties, States, Modifiers and Breakpoints
              @if $depthkey == 0 {
                $exist-subclass: chk-existence($property, _);
                $exist-dash: chk-existence($property, "-");
                $exist-plus: chk-existence($property, "+");
                $exist-extend: chk-existence($property, extend);
                $propvalstring: map-tostring($propertyvalue, ' ');
                $exist-important: chk-existence($propvalstring, important);

                font-weight: $exist-subclass;
                font-stretch: $exist-dash;
                font-kerning: $exist-plus;

                @if $exist-important == true and $brkpresent == false {
                  font-family: $property;
                  font-variant: $brkpresent;
                    #{$property}: #{if(chk-existence($propvalstring, !important), str-replace($propvalstring, ' !important', ' !important'), if(chk-existence($propvalstring, important), str-replace($propvalstring, ' important', ''), ''))};

                }

              }
              // Sub-Classes and Pseudos
              @else if $depthkey > 1 {
                // Single Properties, States, Modifiers and Breakpoints
                @if $depthkey == 2 {

                }
                // Sub-Class Pseudo
                @else if $depthkey == 3 {

                }
                @else {
                  @warn "Dude, didnt you get the memo? This is way beyond the scope.";
                }
              }
            }

              @else if $EpicAct == breakpoint  {

              }

              @else if $EpicAct == normal {
                //font-family: $depthkey;
              }
            }

            //// > //////////// End of IF
          }
        }
      }
    }






  //// --- END CLASS GENERATOR --- ////////////////////////
@mixin breakpointboard($AlphaMap, $BetaMap, $EpicAct) {

  //// ✩ //////////// Root Variables
  $masterlist: to-list($breakpoints, 'keys'); // List of current breakpoints

  @for $i from 1 through length($masterlist) {

    $list-brkpoints: to-list(_($breakpoints, nth($masterlist, $i)));
    $list-brknames: nth($masterlist, $i);
    $long-brkpoints: length($list-brkpoints);

    $brk1: null;
    $brk2: null;
    $brk3: null;
    $brk4: null;
    $brk5: null;

    @if $long-brkpoints >= 1 {
      $brk1: if(nth($list-brkpoints, 1) != null, nth($list-brkpoints, 1), null);
      @if $long-brkpoints > 1 {
        $brk2: if(nth($list-brkpoints, 2) != null, nth($list-brkpoints, 2), null);
        @if $long-brkpoints > 2 {
          $brk2: if(nth($list-brkpoints, 3) != null, nth($list-brkpoints, 3), null);
          @if $long-brkpoints > 3 {
            $brk2: if(nth($list-brkpoints, 4) != null, nth($list-brkpoints, 4), null);
            @if $long-brkpoints > 4 {
              $brk2: if(nth($list-brkpoints, 5) != null, nth($list-brkpoints, 5), null);
            }
          }
        }
      }
    }
    @if $long-brkpoints == 1 {
      @include brkpoint($brk1) {
        @include switchboard($AlphaMap, $EpicAct, $BetaMap, $list-brknames, $extendswitch: null);
      }
    }
    @else if $long-brkpoints == 2 {
      @include brkpoint($brk1, $brk2) {
        @include switchboard($AlphaMap, $EpicAct, $BetaMap, $list-brknames, $extendswitch: null);
      }
    }
    @else if $long-brkpoints == 3 {
      @include brkpoint($brk1, $brk2, $brk3) {
        @include switchboard($AlphaMap, $EpicAct, $BetaMap, $list-brknames, $extendswitch: null);
      }
    }
    @else if $long-brkpoints == 4 {
      @include brkpoint($brk1, $brk2, $brk3, $brk4) {
        @include switchboard($AlphaMap, $EpicAct, $BetaMap, $list-brknames, $extendswitch: null);
      }
    }
    @else if $long-brkpoints == 5 {
      @include brkpoint($brk1, $brk2, $brk3, $brk4, $brk5) {
        @include switchboard($AlphaMap, $EpicAct, $BetaMap, $list-brknames, $extendswitch: null);
      }
    }
    @else {
      @warn "Dude, why would you need more than five? Simplify.";
    }
  }
}

$TestCombo-Deets: (
  Phase2-class: (
    alt: (+testing, woahhhh, #hello, Yolo-awesomeness),
    -k: (".Justkidding .Phase3-class-tablet #testing2.dohhhhhh, %testing"),
    -t: (tablet, placeholder, important),
    _bluish: 30px,
    grid: (grid !important),
    width: 555px,
    height: (50px, important),
    extend:
      (tablet: (Style1, Style2)),
    color: (
      tablet: $red !important),
    background: (
      tablet: grey,
      desktop: black),
    -webkit-min-device-pixel-ratio: 20px,
    transition-delay: 5s,
    hover: (
      font-style: (
        tablet: 20px
      )
    ),
    _blue: (
      width: (
        tablet: 20px))),
  #Phase2-class2: (
    -k: (".Justkidding .Phase3-class-tablet #testing2.dohhhhhh, %testing"),
    grid: sub-grid !important,
    extend: (
      base: (Style1, Style2, Style3)
      ),
    color: (
      tablet: blue !important),
    background: (
      tablet: black 20px 5px solid),
    _red: (
      width: (
        tablet: (4000000px !important),
        desktop: (20px)),
      pseudo: (
        width: (
          tablet: 20
        )
      )
    )
  ));

  $TestStyle-Map: (
    1: (
      width: 999999px,
      grid-template-rows: 25% 100px auto,
      font-style: solid,
      grid-column: "<start-line> / <end-line> | <start-line> / span <value>",
      grid-row: "third-line / 4",
      color: (
        tablet: (green)
      ),
    ),
    2: (
      height: 4444px,
      background: red,
      width: (
        tablet: 20px
      )
    )
  );
  //@include breakpointboard($TestCombo-Deets, null, breakpoint);
//  @include switchboard($AlphaMap: $TestCombo-Deets, $EpicAct: normal, $BetaMap: null, $breakpoint: null, $extendswitch: null);
  @include switchboard($AlphaMap: $TestCombo-Deets, $EpicAct: important, $BetaMap: null, $breakpoint: null, $extendswitch: null);
  //@include switchboard($EpicList: $TestStyle-List, $AlphaMap: $TestStyle-Map, $EpicAct: normal, $EpicList2: $TestCombo-List, $BetaMap: $TestCombo-Deets, $breakpoint: null, $extendswitch: extender);
//  @include switchboard($EpicList: $TestCombo-List, $AlphaMap: $TestCombo-Deets, $EpicAct: breakpoint, $EpicList2: null, $BetaMap: null, $breakpoint: 'tablet', $extendswitch: null);
//  @include switchboard($EpicList: $TestStyle-List, $AlphaMap: $TestStyle-Map, $EpicAct: breakpoint, $EpicList2: $TestCombo-List, $BetaMap: $TestCombo-Deets, $breakpoint: 'tablet', $extendswitch: extender);
//  @include switchboard($EpicList: $TestCombo-List, $AlphaMap: $TestCombo-Deets, $EpicAct: important, $EpicList2: null, $BetaMap: null, $breakpoint: null, $extendswitch: null);
