//// --- SECTION --- ////////////////////////////
  //// 1 //////////// Code/Sass Snippet Name
    //// a //////////// Snippet Sub
//// --- END SECTION --- ////////////////////////

  //// 1 //////////// Connects to tools
  @mixin lines($root-cnctr, $root-type, $cnctr, $type, $breakpoint, $EpicAct, $importantremoval: normal) {
    $root-cnctr: to-list($root-cnctr, $root-type);
    $root-cnctr-str: map-tostring($root-cnctr, ' ');
    $cnctr: if(type-of($cnctr) == string, str-to-list(unquote($cnctr), ' '), if(type-of($cnctr) == list, if($cnctr != (), to-list($cnctr, $type), ""), $cnctr));
    $cnctr-list: null;

    @if $importantremoval == normal {
      $cnctr-list: remove($cnctr, "important", true);
    }
    @else if $importantremoval == full-important {
      $cnctr-list: remove($cnctr, "!important", true);
      $cnctr-list: remove($cnctr, "important", true);
    }

    $cnctr-length: length($cnctr-list);
    $splitter: if(nth($cnctr-list, 1) == auto, built-in, if(nth($cnctr-list, 1) == custo, add-on, neither));
    $custo-call: map-tostring(nth($cnctr-list, 1), '');
    $cnctr-str: map-tostring($cnctr-list, ' ');

    @if $cnctr-length <= 1 {
      #{$root-cnctr}: #{$cnctr-str};
    }
    @else if $cnctr-length > 1 {
      @if $splitter == built-in {
        $cnctr-list: remove($cnctr-list, auto);
        $cnctr-str: map-tostring($cnctr-list, ' ');
        @include toolbox($root-cnctr, $root-cnctr-str, $cnctr-list, $cnctr-str, $cnctr-length, $splitter, $custo-call, $breakpoint, $EpicAct);
      }
      @else if $splitter == add-on {
        $cnctr-list: remove($cnctr-list, custo);
        $cnctr-str: map-tostring($cnctr-list, ' ');
        @include toolbox($root-cnctr, $root-cnctr-str, $cnctr-list, $cnctr-str, $cnctr-length, $splitter, $custo-call, $breakpoint, $EpicAct);
      }
      @else {
        #{$root-cnctr}: #{$cnctr-str};
      }
    }
  }

  //// 2 //////////// Creates css properties or switches over to the lines
  @mixin switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $startkey, $startvalue, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname) {
    $subhands: map-tostring(to-list($startkey, "keys"), ' ');
      $subhands-verify: if($subhands != null, $subhands, "nope");
      $sublefty: if(map-check($extensions, $subhands-verify), true, false);
      $subrighty: if(str-index($subhands-verify, 'extend'), true, false);
      $subuppy: if(str-index($subhands-verify, "descent"), true, false);
      $subdowny: if(map-check($pseudos, $subhands-verify), true, false);

    // Checks and Balances Breakpoints and Base Keys
    $mold: to-list($startvalue, "keys");
    $mold-verify: to-string(if($mold != null, $mold, "nope"));

      @each $breakpoint, $breakpointvalue in $breakpoints {
        $replacement: if(str-index(map-tostring($mold-verify, ' '), $breakpoint), true, false);
        $rslt: append($rslt, $replacement);
      }
      $rslt: if(remove-duplicates(purge($rslt)) == (), false, true); // Breakpoints

      $importantcheck: if(str-index($mold-verify, ' important'), true, false);
      $rslt-imprtnt: if(remove-duplicates(purge($importantcheck)) == (), false, true); // Important
      $basemold: if(type-of($startvalue) == map, if($startvalue != (), to-list($startvalue, "keys"), ""), "");
      $basecheck: if(nth($basemold, 1) == base, true, false);
      $rslt-base: if(remove-duplicates(purge($basecheck)) == (), false, true);

    $override-brkname: if($override-brkname != null, $override-brkname, "nope");
      $breakpointcheck2: if(str-index($mold-verify, $override-brkname), true, false);
      $rslt-brkpnt2: if(remove-duplicates(purge($breakpointcheck2)) == (), false, true);

      @if $redswitch == true {
        $rslt-base-solve: true;
        $rslt-imprtnt-solve: true;
        $rslt-brkpnt-solve: false;
      }
      @else if $blueswitch == true {
        $rslt-base-solve: true;
        $rslt-imprtnt-solve: true;
        $rslt-brkpnt-solve: true;
      }

    @if $sublefty != true and $boardroute == new and $subuppy == false and $subdowny == false{
      $propval: map-tostring(to-list($startvalue, "keys"), ' ');

      // First Level properties (no breakpoints, base or anything else but solid first level css)
      @if $redswitch == false and $blueswitch == false {
        @if $EpicAct == normal or $EpicAct == important {
          @if $rslt == false and $rslt-imprtnt == $rslt-imprtnt-solve and $rslt-base == false {
            @include lines($startkey, "keys", $startvalue, "keys", $breakpoint, $EpicAct);
          }
        }
      }
      @else if $redswitch == true and $blueswitch == false {
        @if $rslt == $rslt-brkpnt-solve {
          @include lines($startkey, "keys", $startvalue, "keys", $breakpoint, $EpicAct);
        }
      }
      @else if $blueswitch == true and $redswitch == false and $breakpoint == $override-brkname {
        @if $rslt == false and $rslt-imprtnt == $rslt-imprtnt-solve {
          @include lines($startkey, "keys", $startvalue, "keys", $breakpoint, $EpicAct, full-important);
        }
      }

      // Second Level properties (can be breakpoints, base, etc.)
      @each $key, $value in $startvalue {
        $mold: to-string($key);
          $mold-verify: if($mold != null, $mold, "nope");
          $basecheck: if(str-index($mold, base), true, false);
          $breakpointcheck: if($breakpoint != null, if(str-index($mold-verify, $breakpoint), true, false), "()");
          $breakpointcheck3: if(str-index($mold-verify, $override-brkname), true, false);
        $submold: to-string($value);
          $submold-verify: if($submold != null, $submold, "nope");
          $importantcheck: if(str-index($submold-verify, ' important'), true, false);

        $rslt-base: if(remove-duplicates(purge($basecheck)) == (), false, true);
        $rslt-imprtnt: if(remove-duplicates(purge($importantcheck)) == (), false, true);
        $rslt-brkpnt: if($rslt-brkpnt-solve != false, if(remove-duplicates(purge($breakpointcheck)) == (), false, true), false);
        $rslt-brkpnt3: if(remove-duplicates(purge($breakpointcheck3)) == (), false, true);

        $propval: map-tostring(to-list($value, "values"), ' ');

        @if $redswitch == false and $blueswitch == false {
          @if $rslt-base == $rslt-base-solve and $rslt-imprtnt == $rslt-imprtnt-solve and $rslt-brkpnt == $rslt-brkpnt-solve {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
          @else if $rslt-imprtnt == true and $rslt-brkpnt == true {
            @warn "Sorry, you can't have it both ways. If you'd like to make this important within a breakpoint just add an '!'";
          }
        }
        @else if $redswitch == true and $blueswitch == false {
          @if $rslt-base == $rslt-base-solve and $rslt-brkpnt == $rslt-brkpnt-solve {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
        }
        @else if $blueswitch == true and $redswitch == false and $breakpoint == $override-brkname {
          @if $rslt-brkpnt2 == true and $rslt-brkpnt3 == true {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
          @else if $rslt-brkpnt2 == false and $rslt-base == true {
            @include lines($startkey, "keys", $value, "values", $breakpoint, $EpicAct);
          }
        }
      }
    }
    @else if $subrighty == true and $boardroute == extend {

      @each $key, $value in $startvalue {
        $mold: map-tostring(to-list($key, "keys"), ' ');
        $mold-verify: if($mold != null, $mold, "nope");
        $breakpointslist: to-list($breakpoints, 'keys'); // List of current breakpoints

        $brkpntcheck: null;
        $rslttotal: null;
        $brkpntgo: null;

        @each $breakpointtie, $breakpointvaluetie in $breakpoints {
            $brkpntcheck: if(str-index($key, $breakpointtie), true, false);
            @if $brkpntcheck == true {
              $rslttotal: $breakpointtie;
            }
            $brkpntgo: append($brkpntgo, $brkpntcheck);
        }
        $rslt-brkpnt: if(remove-duplicates(purge($brkpntgo)) == (), false, true);

        @if $EpicAct == breakpoint {
          @if $rslt-brkpnt == true and $rslttotal == $breakpoint {
            @extend %#{$key};
          }
        }
        @else if $EpicAct == normal or $EpicAct == important {
          @if $rslt-brkpnt == false {
            @extend %#{$key};
          }
        }
      }
    }

    // Creats Descendants within subclasses or pseudos
    @else if $subuppy == true and $boardroute == new {

        $aliasnames: ();
        $mold-verify: null;
        $rslt-link: null;
        $mold: null;

        @each $key, $value in $startvalue {
          $mold: map-tostring($key, '', true);
          $mold-verify: if($mold != null, $mold, "nope");
          $linkcheck: if(str-index($mold-verify, 'name'), true, false);
          $rslt-link: if(remove-duplicates(purge($linkcheck)) == (), false, true);

          @if $rslt-link == true {
            @for $i from 1 through length($value) {
              $propval: map-tostring(nth($value, $i), ' ');
              $aliastest1: null;
              $aliastest2: null;

              @if if(str-index($propval, '+'), true, true) {
                $aliastest1: if(str-index($propval, '+'), str-replace($propval, '+', '%'), $propval);
                @if if(str-index($aliastest1, '_'), true, true) {
                  $aliastest2: if(str-index($aliastest1, '_'), str-replace($aliastest1, '_', '.'), $aliastest1);
                    @if if(str-index($aliastest2, '#'), true, true) {
                      $aliasnames: append($aliasnames, $aliastest2, comma);
                    }
                  }
                @else {
                  $aliasnames: append($aliasnames, $aliastest1, comma);
                }
              }
              @else {
                $aliasnames: append($aliasnames, $propval, comma);
              }
            }
          }
        }
        $aliasname: if($aliasnames != (), $aliasnames, unquote(''));

        #{$aliasname} {
          @each $key, $value in $startvalue {
            $subhands: map-tostring($key, ' ');
            $subrighty: if(map-check($pseudos, $subhands), true, false);
            $sublefty: if(str-index($subhands, "_"), true, false);
            $linkcheck: if(str-index($key, 'name'), true, false);
            $subextend: if(str-index($subhands, 'extend'), true, false);

            @if $sublefty == false and $subrighty == false and $linkcheck == false and $subextend == false {
              @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $key, $value, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
            }
            @else if $subrighty == true {
              &#{unquote(":")}#{$key} {
                @each $subprop, $subpropval in $value {
                  @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
                }
              }
            }
            @else if $subextend == true {
              @include router($key, $value, $startvalue, null, $breakpoint, $EpicAct, extend);
            }
            @else if $sublefty == true {
              @warn "Creating subclasses within descendants isnt allowed.";
            }
          }
        }
      }

      @else if $subdowny == true and $boardroute == new {
        &#{unquote(":")}#{$startkey} {
          @each $subprop, $subpropval in $startvalue {
            @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
          }
        }
      }
    }

  //// 3 //////////// Routes acceptable connections through to the switches/lines
  @mixin router($property, $propertyvalue, $value, $key, $breakpoint, $EpicAct, $boardroute, $breakpoint-override: false, $important-override: false, $override-brkname: null) {
    $rslt-imprtnt-solve: null !default;
    $rslt-base-solve: null !default;
    $rslt-brkpnt-solve: null !default;
    $redswitch: false !default;
    $blueswitch: false !default;

    @if $EpicAct == normal {
      $rslt-imprtnt-solve: false !default;
      $rslt-base-solve: true !default;
      $rslt-brkpnt-solve: false !default;

      @if $important-override == true {
        $redswitch: false;
        $blueswitch: false;
      }
      @else if $breakpoint-override == true {
        $blueswitch: false;
        $redswitch: false;
      }
    }
    @else if $EpicAct == important {
      $rslt-imprtnt-solve: true !default;
      $rslt-base-solve: true !default;
      $rslt-brkpnt-solve: false !default;

      @if $important-override == true {
        $redswitch: true;
        $blueswitch: false;
      }
      @else if $breakpoint-override == true {
        $blueswitch: false;
        $redswitch: false;
      }
    }
    @else if $EpicAct == breakpoint {
      $rslt-imprtnt-solve: false !default;
      $rslt-base-solve: false !default;
      $rslt-brkpnt-solve: true !default;

      @if $breakpoint-override == true {
        $blueswitch: true;
        $redswitch: false;
      }
      @else if $important-override == true {
        $redswitch: false;
        $blueswitch: false;
      }
    }

    // Removing or allowing extensions, pseudos and subclasses
      $hands: map-tostring(to-list($property, "keys"), ' ');
        $lefty: if(map-check($pseudos, $hands), true, false);
        $righty: if(str-index($hands, "_"), true, false);
        $uppy: if(str-index($hands, "descent"), true, false);
        $downy: if(str-index($hands, "extend"), true, false);
        $sidey: if(str-index($hands, "override"), true, false);

      $rslt: (); // Breakpoint
      $rslt-imprtnt: (); // Important
      $rslt-base: (); // Base

    @if $boardroute == new {

      // For CSS Properties
      @if $lefty != true and $righty != true and $uppy != true {
        @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $property, $propertyvalue, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
      }

      // For Pseudos
      @else if $lefty == true {
        &#{unquote(":")}#{$property} {
          @each $subprop, $subpropval in $propertyvalue {
            @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
          }
        }
      }

      // For Sub-classes
      @else if $righty == true {
        &#{if($property != null, unquote("-"), '') + if(str-index($property, '_'), str-replace($property, _, ''), '')} {
          @each $subprop, $subpropval in $propertyvalue {
            @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
          }
        }
      }

      // For Descendants
      @else if $uppy == true {
        $aliasnames: ();
        $mold-verify: null;
        $rslt-link: null;
        $mold: null;

        @each $subprop, $subpropval in $propertyvalue {
          $mold: map-tostring($subprop, '', true);
          $mold-verify: if($mold != null, $mold, "nope");
          $linkcheck: if(str-index($mold-verify, 'name'), true, false);
          $rslt-link: if(remove-duplicates(purge($linkcheck)) == (), false, true);

          @if $rslt-link == true {
            @for $i from 1 through length($subpropval) {
              $propval: map-tostring(nth($subpropval, $i), ' ');
              $aliastest1: null;
              $aliastest2: null;

              @if if(str-index($propval, '+'), true, true) {
                $aliastest1: if(str-index($propval, '+'), str-replace($propval, '+', '%'), $propval);
                @if if(str-index($aliastest1, '_'), true, true) {
                  $aliastest2: if(str-index($aliastest1, '_'), str-replace($aliastest1, '_', '.'), $aliastest1);
                    @if if(str-index($aliastest2, '#'), true, true) {
                      $aliasnames: append($aliasnames, $aliastest2, comma);
                    }
                  }
                @else {
                  $aliasnames: append($aliasnames, $aliastest1, comma);
                }
              }
              @else {
                $aliasnames: append($aliasnames, $propval, comma);
              }
            }
          }
        }
        $aliasname: if($aliasnames != (), $aliasnames, unquote(''));

        #{$aliasname} {

          @each $subprop, $subpropval in $propertyvalue {
            $subhands: map-tostring($subprop, ' ');
            $subrighty: if(map-check($pseudos, $subhands), true, false);
            $sublefty: if(str-index($hands, "_"), true, false);
            $linkcheck: if(str-index($subprop, 'name'), true, false);

            @if $sublefty == false and $subrighty == false and $linkcheck == false {
              @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subprop, $subpropval, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
            }
            @else if $subrighty == true {
              &#{unquote(":")}#{$subprop} {
                  @each $subsubprop, $subsubpropval in $subpropval {
                    @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $subsubprop, $subsubpropval, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
                  }
              }
            }
            @else if $sublefty == true {
              @warn "Creating subclasses within a descendant isnt allowed.";
            }
          }
        }
      }

    }

    @else if $boardroute == extend {
      @if $downy == true {
        @include switch($EpicAct, $rslt, $rslt-brkpnt-solve, $rslt-imprtnt, $rslt-imprtnt-solve, $rslt-base, $rslt-base-solve, $property, $propertyvalue, $breakpoint, $redswitch, $blueswitch, $boardroute, $override-brkname);
      }
    }

  }

  //// 4 //////////// Generates the classes, ids, and pseudo classes
  @mixin switchboard($AlphaMap, $EpicAct, $breakpoint: null) {

    //// ✩ //////////// Root Variables
    $breakpointslist: to-list($breakpoints, 'keys'); // List of current breakpoints

      //// --- CLASS and SUB-CLASS GENERATOR --- ////////////////////////////
      @each $key, $value in $AlphaMap {

        //// 1 //////////// Determines legit or placeholder class, or id.
        $key-string: to-string($key);
        $type: null;
        $aliasnames: ();
        $aliasname: null;
        $exist-alias: null;
        $exist-html: null;

          @if if(str-index($key-string, '#'), true, false) {
            $type: "#";
          }
          @else if if(str-index($key-string, '+'), true, false) {
            $type: "%";
          }
          @else if chk-existence($html-elements, $key) {
            $type: "";
            $exist-html: true;
          }
          @else {
            $type: ".";
          }

          $mainname: $type + if(str-index($key-string, '#'), str-replace($key, '#', ''), if(str-index($key-string, '+'), str-replace($key, '+', ''), $key-string));
          $brkname: if($EpicAct == breakpoint, unquote('-' + $breakpoint), '');
          $aliasnames-str: null;
          $aliasnames-list2: null;
          $aliasbrk: if($EpicAct == breakpoint and $Include-AliasBreakName == on, unquote('-' + $breakpoint), '');

          @each $property, $propertyvalue in $value {
            $exist-alias: chk-existence($property, alias);

            @if $exist-alias == true {
              @for $i from 1 through length($propertyvalue) {
                $propval: if($propertyvalue != (), nth($propertyvalue, $i), "nope");
                @if $propval != "nope" {
                  @if if(str-index($propval, '#'), true, false) {
                    $aliasnames: append($aliasnames, #{$propval}#{$aliasbrk}, comma);
                  }
                  @else if if(str-index($propval, '+'), true, false) {
                    $aliasnames: append($aliasnames, #{if(str-index($propval, '+'), str-replace($propval, '+', '%'), null)}#{$aliasbrk}, comma);
                  }
                  @else if chk-existence($html-elements, $propval) {
                    @error "Sorry, you can`t use '#{$propval}' as an alias.";
                  }
                  @else {
                    $aliasnames: append($aliasnames, #{unquote(".")}#{$propval}#{$aliasbrk}, comma);
                  }
                }
                @else if $propval == "nope" {
                  $aliasnames: ();
                  @error "You should go ahead and remove the alias field from #{$mainname}`s map.";
                }
              }
            }
          }
          $aliasname: if($aliasnames != (), $aliasnames, unquote(''));


          //// 2 //////////// Creates the classes, ids, subclasses and pseudos
          #{if($exist-html == true, $mainname, $mainname + $brkname)}#{if($aliasname != null, unquote(', '), '')}#{if($aliasname != '', $aliasname, '')} {

            $impride: chk-override($lock: $value, $key: override, $metal: important);
            $important-override: if(remove-duplicates(purge($impride)) == (), false, true);
            $brkride: chk-override($lock: $value, $key: override, $metal: breakpoint);
            $breakpoint-override: if(remove-duplicates(purge($brkride)) == (), false, true);
            $override-brkname: if($breakpoint-override == true, _($AlphaMap, $key, -t), null);

            @if $important-override == true and $EpicAct == important {
              @each $property, $propertyvalue in $value {
                @include router($property, $propertyvalue, $value, $mainname, $breakpoint, $EpicAct, new, $breakpoint-override, $important-override);
              }
            }
            @else if $breakpoint-override == true and $EpicAct == breakpoint {
              @each $property, $propertyvalue in $value {
                @include router($property, $propertyvalue, $value, $mainname, $breakpoint, $EpicAct, new, $breakpoint-override, $important-override, $override-brkname);
              }
            }
            @if $breakpoint-override == false and $important-override == false {
                @each $property, $propertyvalue in $value {
                  @include router($property, $propertyvalue, $value, $mainname, $breakpoint, $EpicAct, new, $breakpoint-override, $important-override);
                }
              }
            }

            //// 3 //////////// Creates the extends
            #{$mainname + $brkname} {
              @each $property, $propertyvalue in $value {
                @include router($property, $propertyvalue, $value, $mainname, $breakpoint, $EpicAct, extend);
              }
            }
          }
        }

  //// 5 //////////// Generates breakpoints and runs the switchboard within.
  @mixin breakpointboard($AlphaMap, $EpicAct) {

    //// ✩ //////////// Root Variables
    $masterlist: to-list($breakpoints, 'keys'); // List of current breakpoints

    @for $i from 1 through length($masterlist) {

      $list-brkpoints: to-list(_($breakpoints, nth($masterlist, $i)));
      $list-brknames: nth($masterlist, $i);
      $long-brkpoints: length($list-brkpoints);

      $brk1: null;
      $brk2: null;
      $brk3: null;
      $brk4: null;
      $brk5: null;

      @if $long-brkpoints >= 1 {
        $brk1: if(nth($list-brkpoints, 1) != null, nth($list-brkpoints, 1), null);
        @if $long-brkpoints > 1 {
          $brk2: if(nth($list-brkpoints, 2) != null, nth($list-brkpoints, 2), null);
          @if $long-brkpoints > 2 {
            $brk2: if(nth($list-brkpoints, 3) != null, nth($list-brkpoints, 3), null);
            @if $long-brkpoints > 3 {
              $brk2: if(nth($list-brkpoints, 4) != null, nth($list-brkpoints, 4), null);
              @if $long-brkpoints > 4 {
                $brk2: if(nth($list-brkpoints, 5) != null, nth($list-brkpoints, 5), null);
              }
            }
          }
        }
      }
      @if $long-brkpoints == 1 {
        @include brkpoint($brk1) {
          @include switchboard($AlphaMap, $EpicAct, $list-brknames);
        }
      }
      @else if $long-brkpoints == 2 {
        @include brkpoint($brk1, $brk2) {
          @include switchboard($AlphaMap, $EpicAct, $list-brknames);
        }
      }
      @else if $long-brkpoints == 3 {
        @include brkpoint($brk1, $brk2, $brk3) {
          @include switchboard($AlphaMap, $EpicAct, $list-brknames);
        }
      }
      @else if $long-brkpoints == 4 {
        @include brkpoint($brk1, $brk2, $brk3, $brk4) {
          @include switchboard($AlphaMap, $EpicAct, $list-brknames);
        }
      }
      @else if $long-brkpoints == 5 {
        @include brkpoint($brk1, $brk2, $brk3, $brk4, $brk5) {
          @include switchboard($AlphaMap, $EpicAct, $list-brknames);
        }
      }
      @else {
        @warn "Dude, why would you need more than five? K.I.S.S.";
      }
    }
  }

$Testing-Space: (
  Phase5-class1: (
    alias: (#forcefield, +testing),
    override: (),
    _bluish: (
      margin-left: 30px),
    grid: (auto, grid important),
    width: 555px,
    extend: (),
    color: (auto, #282828, .5, lighten),
    background: (repeating-linear-gradient(
                  -55deg,
                  #222,
                  #222 10px,
                  #333 10px,
                  #333 20px
                            )
    ),
    -webkit-min-device-pixel-ratio: 20px,
    transition-delay: (
      tablet: 5s),
    hover: (
      width: 20px,
      font-style: (
        base: 20px important,
        tablet: 20px
      )
    ),
    _blue: (
      width: (
        tablet: 20px)),
    descent: (
      name: ".thisisgood #forwhatitsworth .thatsmells",
      height: 40000px,
      padding-left: (
        tablet: 300px
      )),
      descent-2: (
        name: ".isthisworking",
        color: blue,
        padding-left: 40em)
      ),
  #Phase2-class2: (
    descent: (
      name: (_Justkidding_testing2),
      width: 20px,
      hover: (
        width: 666px)),
    override: (),
    grid: "sub-grid 20px 40px important",
    margin: (auto, 40em),
    extend: (),
    color: (
      base: yellow,
      desktop: green,
      tablet: pink,
      phablet: purple),
    background: (
      tablet: pink 20px 5px solid),
    _red: (
      width: (
        base: 30rem important,
        tablet: (pink !important),
        desktop: (20px),
        phablet: 30px)),
    after: (
      width: (
        base: 40px,
        desktop: 20px
      )
    )
  ),
  #Phase3-class1: (
    margin-left: 11px important,
    margin-right: 22px,
    margin-top: 33px,
    margin-bottom: 44px,
    color: (
      tablet: purple,
      desktop: pink,
      phablet: violet,
      base: blue
    ),
    padding-left: 20px,
    padding-right: 40px,
    padding-bottom: 22px,
    padding-top: 50px,
    z-index: -9999999999,
    width: (
      tablet: 960em,
      desktop: 1440px,
      phablet: 738px,
      base: auto
    )
  )
  );
